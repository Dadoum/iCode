// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class Region : GLib.Object {

		public Region (IntPtr raw) : base(raw) {}

		protected Region() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_region_get_parent_instance_offset ();

		static uint parent_instance_offset = gtksourcesharp_gtksource_region_get_parent_instance_offset ();
		public GLib.Object ParentInstance {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_instance_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceRegionClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceRegionClass> class_structs;

		static GtkSourceRegionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceRegionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceRegionClass class_struct = (GtkSourceRegionClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceRegionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceRegionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_region_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_region_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_region_add_region(IntPtr raw, IntPtr region_to_add);

		public void AddRegion(GtkSource.Region region_to_add) {
			gtk_source_region_add_region(Handle, region_to_add == null ? IntPtr.Zero : region_to_add.Handle);
		}

		public void AddRegion() {
			AddRegion (null);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_region_get_start_region_iter(IntPtr raw, out IntPtr iter);

		public GtkSource.RegionIter StartRegionIter { 
			get {
				GtkSource.RegionIter iter;
				IntPtr native_iter;
				gtk_source_region_get_start_region_iter(Handle, out native_iter);
				iter = native_iter == IntPtr.Zero ? null : (GtkSource.RegionIter) GLib.Opaque.GetOpaque (native_iter, typeof (GtkSource.RegionIter), false);
				return iter;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_region_intersect_region(IntPtr raw, IntPtr region2);

		public GtkSource.Region IntersectRegion(GtkSource.Region region2) {
			IntPtr raw_ret = gtk_source_region_intersect_region(Handle, region2 == null ? IntPtr.Zero : region2.Handle);
			GtkSource.Region ret = GLib.Object.GetObject(raw_ret, true) as GtkSource.Region;
			return ret;
		}

		public GtkSource.Region IntersectRegion() {
			return IntersectRegion (null);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_region_is_empty(IntPtr raw);

		public bool IsEmpty { 
			get {
				bool raw_ret = gtk_source_region_is_empty(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_region_subtract_region(IntPtr raw, IntPtr region_to_subtract);

		public void SubtractRegion(GtkSource.Region region_to_subtract) {
			gtk_source_region_subtract_region(Handle, region_to_subtract == null ? IntPtr.Zero : region_to_subtract.Handle);
		}

		public void SubtractRegion() {
			SubtractRegion (null);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_region_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = gtk_source_region_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

#endregion
	}
}
