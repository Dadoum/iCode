// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class Map : GtkSource.View {

		public Map (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_map_new();

		public Map () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Map)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_map_new();
		}

		[GLib.Property ("font-desc")]
		public Pango.FontDescription FontDesc {
			get {
				GLib.Value val = GetProperty ("font-desc");
				Pango.FontDescription ret = (Pango.FontDescription) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value, "PangoFontDescription");
				SetProperty("font-desc", val);
				val.Dispose ();
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_map_get_view(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_map_set_view(IntPtr raw, IntPtr view);

		[GLib.Property ("view")]
		public GtkSource.View View {
			get  {
				IntPtr raw_ret = gtk_source_map_get_view(Handle);
				GtkSource.View ret = GLib.Object.GetObject(raw_ret) as GtkSource.View;
				return ret;
			}
			set  {
				gtk_source_map_set_view(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_map_get_parent_instance_offset ();

		static uint parent_instance_offset = gtksourcesharp_gtksource_map_get_parent_instance_offset ();
		public GtkSource.View ParentInstance {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_instance_offset);
					return GLib.Object.GetObject((*raw_ptr)) as GtkSource.View;
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceMapClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GtkSource.View)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceMapClass> class_structs;

		static GtkSourceMapClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceMapClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceMapClass class_struct = (GtkSourceMapClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceMapClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceMapClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_map_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_map_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static Map ()
		{
			ObjectManager.Initialize ();
		}
#endregion
	}
}
