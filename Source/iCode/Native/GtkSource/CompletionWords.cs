// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class CompletionWords : GLib.Object, GtkSource.ICompletionProvider {

		public CompletionWords (IntPtr raw) : base(raw) {}

		protected CompletionWords() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("activation")]
		public GtkSource.CompletionActivation Activation {
			get {
				GLib.Value val = GetProperty ("activation");
				GtkSource.CompletionActivation ret = (GtkSource.CompletionActivation) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("activation", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("interactive-delay")]
		public int InteractiveDelay {
			get {
				GLib.Value val = GetProperty ("interactive-delay");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("interactive-delay", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("minimum-word-size")]
		public uint MinimumWordSize {
			get {
				GLib.Value val = GetProperty ("minimum-word-size");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("minimum-word-size", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("name")]
		public string Name {
			get {
				GLib.Value val = GetProperty ("name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("name", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("priority")]
		public int Priority {
			get {
				GLib.Value val = GetProperty ("priority");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("priority", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("proposals-batch-size")]
		public uint ProposalsBatchSize {
			get {
				GLib.Value val = GetProperty ("proposals-batch-size");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("proposals-batch-size", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("scan-batch-size")]
		public uint ScanBatchSize {
			get {
				GLib.Value val = GetProperty ("scan-batch-size");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("scan-batch-size", val);
				val.Dispose ();
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_completionwords_get_parent_offset ();

		static uint parent_offset = gtksourcesharp_gtksource_completionwords_get_parent_offset ();
		public GLib.Object Parent {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceCompletionWordsClass {
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceCompletionWordsClass> class_structs;

		static GtkSourceCompletionWordsClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceCompletionWordsClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceCompletionWordsClass class_struct = (GtkSourceCompletionWordsClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceCompletionWordsClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceCompletionWordsClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_words_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_completion_words_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_completion_provider_get_activation(IntPtr raw);

		GtkSource.CompletionActivation GtkSource.ICompletionProvider.Activation { 
			get {
				int raw_ret = gtk_source_completion_provider_get_activation(Handle);
				GtkSource.CompletionActivation ret = (GtkSource.CompletionActivation) raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_provider_get_icon_name(IntPtr raw);

		public string IconName { 
			get {
				IntPtr raw_ret = gtk_source_completion_provider_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_completion_provider_get_interactive_delay(IntPtr raw);

		int GtkSource.ICompletionProvider.InteractiveDelay { 
			get {
				int raw_ret = gtk_source_completion_provider_get_interactive_delay(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_provider_get_name(IntPtr raw);

		string GtkSource.ICompletionProvider.Name { 
			get {
				IntPtr raw_ret = gtk_source_completion_provider_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_completion_provider_get_priority(IntPtr raw);

		int GtkSource.ICompletionProvider.Priority { 
			get {
				int raw_ret = gtk_source_completion_provider_get_priority(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_completion_provider_match(IntPtr raw, IntPtr context);

		public bool Match(GtkSource.CompletionContext context) {
			bool raw_ret = gtk_source_completion_provider_match(Handle, context == null ? IntPtr.Zero : context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_provider_populate(IntPtr raw, IntPtr context);

		public void Populate(GtkSource.CompletionContext context) {
			gtk_source_completion_provider_populate(Handle, context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_provider_update_info(IntPtr raw, IntPtr proposal, IntPtr info);

		public void UpdateInfo(GtkSource.ICompletionProposal proposal, GtkSource.CompletionInfo info) {
			gtk_source_completion_provider_update_info(Handle, proposal == null ? IntPtr.Zero : ((proposal is GLib.Object) ? (proposal as GLib.Object).Handle : (proposal as GtkSource.CompletionProposalAdapter).Handle), info == null ? IntPtr.Zero : info.Handle);
		}

#endregion
	}
}
