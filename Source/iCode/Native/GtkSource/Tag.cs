// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class Tag : GLib.Object {

		public Tag (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_tag_new(IntPtr name);

		public Tag (string name) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Tag)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			Raw = gtk_source_tag_new(native_name);
			GLib.Marshaller.Free (native_name);
		}

		[GLib.Property ("draw-spaces")]
		public bool DrawSpaces {
			get {
				GLib.Value val = GetProperty ("draw-spaces");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("draw-spaces", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("draw-spaces-set")]
		public bool DrawSpacesSet {
			get {
				GLib.Value val = GetProperty ("draw-spaces-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("draw-spaces-set", val);
				val.Dispose ();
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceTagClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceTagClass> class_structs;

		static GtkSourceTagClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceTagClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceTagClass class_struct = (GtkSourceTagClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceTagClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceTagClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_tag_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_tag_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
