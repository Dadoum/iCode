// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class Global {

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_completion_error_quark();

		public static int CompletionErrorQuark() {
			int raw_ret = gtk_source_completion_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_all();

		public static GLib.SList[] EncodingGetAll() {
			IntPtr raw_ret = gtk_source_encoding_get_all();
			GLib.SList[] ret = (GLib.SList[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, true, typeof(GLib.SList));
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_current();

		public static GtkSource.Encoding EncodingGetCurrent() {
			IntPtr raw_ret = gtk_source_encoding_get_current();
			GtkSource.Encoding ret = GtkSource.Encoding.New (raw_ret);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_default_candidates();

		public static GLib.SList[] EncodingGetDefaultCandidates() {
			IntPtr raw_ret = gtk_source_encoding_get_default_candidates();
			GLib.SList[] ret = (GLib.SList[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, true, typeof(GLib.SList));
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_from_charset(IntPtr charset);

		public static GtkSource.Encoding EncodingGetFromCharset(string charset) {
			IntPtr native_charset = GLib.Marshaller.StringToPtrGStrdup (charset);
			IntPtr raw_ret = gtk_source_encoding_get_from_charset(native_charset);
			GtkSource.Encoding ret = GtkSource.Encoding.New (raw_ret);
			GLib.Marshaller.Free (native_charset);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_utf8();

		public static GtkSource.Encoding EncodingGetUtf8() {
			IntPtr raw_ret = gtk_source_encoding_get_utf8();
			GtkSource.Encoding ret = GtkSource.Encoding.New (raw_ret);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_loader_error_quark();

		public static int FileLoaderErrorQuark() {
			int raw_ret = gtk_source_file_loader_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_saver_error_quark();

		public static int FileSaverErrorQuark() {
			int raw_ret = gtk_source_file_saver_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_finalize();

		~Global()
		{
			gtk_source_finalize();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_init();

		public static void Init() {
			gtk_source_init();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_utils_escape_search_text(IntPtr text);

		public static string UtilsEscapeSearchText(string text) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			IntPtr raw_ret = gtk_source_utils_escape_search_text(native_text);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_text);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_utils_unescape_search_text(IntPtr text);

		public static string UtilsUnescapeSearchText(string text) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			IntPtr raw_ret = gtk_source_utils_unescape_search_text(native_text);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_text);
			return ret;
		}

#endregion
	}
}
