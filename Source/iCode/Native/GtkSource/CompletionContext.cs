// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class CompletionContext : GLib.Object {

		public CompletionContext (IntPtr raw) : base(raw) {}

		protected CompletionContext() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_completion_context_get_activation(IntPtr raw);

		[GLib.Property ("activation")]
		public GtkSource.CompletionActivation Activation {
			get  {
				int raw_ret = gtk_source_completion_context_get_activation(Handle);
				GtkSource.CompletionActivation ret = (GtkSource.CompletionActivation) raw_ret;
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("activation", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("completion")]
		public GtkSource.Completion Completion {
			get {
				GLib.Value val = GetProperty ("completion");
				GtkSource.Completion ret = (GtkSource.Completion) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_completioncontext_get_parent_offset ();

		static uint parent_offset = gtksourcesharp_gtksource_completioncontext_get_parent_offset ();
		public GLib.InitiallyUnowned Parent {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_offset);
					return (GLib.InitiallyUnowned) GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[GLib.Signal("cancelled")]
		public event System.EventHandler Cancelled {
			add {
				this.AddSignalHandler ("cancelled", value);
			}
			remove {
				this.RemoveSignalHandler ("cancelled", value);
			}
		}

		static CancelledNativeDelegate Cancelled_cb_delegate;
		static CancelledNativeDelegate CancelledVMCallback {
			get {
				if (Cancelled_cb_delegate == null)
					Cancelled_cb_delegate = new CancelledNativeDelegate (Cancelled_cb);
				return Cancelled_cb_delegate;
			}
		}

		static void OverrideCancelled (GLib.GType gtype)
		{
			OverrideCancelled (gtype, CancelledVMCallback);
		}

		static void OverrideCancelled (GLib.GType gtype, CancelledNativeDelegate callback)
		{
			GtkSourceCompletionContextClass class_iface = GetClassStruct (gtype, false);
			class_iface.Cancelled = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void CancelledNativeDelegate (IntPtr inst);

		static void Cancelled_cb (IntPtr inst)
		{
			try {
				CompletionContext __obj = GLib.Object.GetObject (inst, false) as CompletionContext;
				__obj.OnCancelled ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.CompletionContext), ConnectionMethod="OverrideCancelled")]
		protected virtual void OnCancelled ()
		{
			InternalCancelled ();
		}

		private void InternalCancelled ()
		{
			CancelledNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Cancelled;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceCompletionContextClass {
			public CancelledNativeDelegate Cancelled;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceCompletionContextClass> class_structs;

		static GtkSourceCompletionContextClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceCompletionContextClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceCompletionContextClass class_struct = (GtkSourceCompletionContextClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceCompletionContextClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceCompletionContextClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_context_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_completion_context_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_context_add_proposals(IntPtr raw, IntPtr provider, IntPtr proposals, bool finished);

		public void AddProposals(GtkSource.ICompletionProvider provider, GLib.List proposals, bool finished) {
			gtk_source_completion_context_add_proposals(Handle, provider == null ? IntPtr.Zero : ((provider is GLib.Object) ? (provider as GLib.Object).Handle : (provider as GtkSource.CompletionProviderAdapter).Handle), proposals == null ? IntPtr.Zero : proposals.Handle, finished);
		}

		public void AddProposals(GtkSource.ICompletionProvider provider, bool finished) {
			AddProposals (provider, null, finished);
		}

#endregion
	}
}
