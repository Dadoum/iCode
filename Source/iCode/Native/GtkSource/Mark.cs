// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class Mark : GLib.Object {

		public Mark (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_new(IntPtr name, IntPtr category);

		public Mark (string name, string category) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Mark)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_category = GLib.Marshaller.StringToPtrGStrdup (category);
			Raw = gtk_source_mark_new(native_name, native_category);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_category);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_get_category(IntPtr raw);

		[GLib.Property ("category")]
		public string Category {
			get  {
				IntPtr raw_ret = gtk_source_mark_get_category(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceMarkClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceMarkClass> class_structs;

		static GtkSourceMarkClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceMarkClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceMarkClass class_struct = (GtkSourceMarkClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceMarkClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceMarkClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_mark_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_next(IntPtr raw, IntPtr category);

		public GtkSource.Mark Next(string category) {
			IntPtr native_category = GLib.Marshaller.StringToPtrGStrdup (category);
			IntPtr raw_ret = gtk_source_mark_next(Handle, native_category);
			GtkSource.Mark ret = GLib.Object.GetObject(raw_ret) as GtkSource.Mark;
			GLib.Marshaller.Free (native_category);
			return ret;
		}

		public GtkSource.Mark Next() {
			return Next (null);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_prev(IntPtr raw, IntPtr category);

		public GtkSource.Mark Prev(string category) {
			IntPtr native_category = GLib.Marshaller.StringToPtrGStrdup (category);
			IntPtr raw_ret = gtk_source_mark_prev(Handle, native_category);
			GtkSource.Mark ret = GLib.Object.GetObject(raw_ret) as GtkSource.Mark;
			GLib.Marshaller.Free (native_category);
			return ret;
		}

#endregion
	}
}
