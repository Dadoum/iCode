// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class Language : GLib.Object {

		public Language (IntPtr raw) : base(raw) {}

		protected Language() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_language_get_hidden(IntPtr raw);

		[GLib.Property ("hidden")]
		public bool Hidden {
			get  {
				bool raw_ret = gtk_source_language_get_hidden(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_id(IntPtr raw);

		[GLib.Property ("id")]
		public string Id {
			get  {
				IntPtr raw_ret = gtk_source_language_get_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_name(IntPtr raw);

		[GLib.Property ("name")]
		public string Name {
			get  {
				IntPtr raw_ret = gtk_source_language_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_section(IntPtr raw);

		[GLib.Property ("section")]
		public string Section {
			get  {
				IntPtr raw_ret = gtk_source_language_get_section(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_language_get_parent_instance_offset ();

		static uint parent_instance_offset = gtksourcesharp_gtksource_language_get_parent_instance_offset ();
		public GLib.Object ParentInstance {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_instance_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceLanguageClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceLanguageClass> class_structs;

		static GtkSourceLanguageClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceLanguageClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceLanguageClass class_struct = (GtkSourceLanguageClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceLanguageClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceLanguageClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_language_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_globs(IntPtr raw);

		public string[] Globs { 
			get {
				IntPtr raw_ret = gtk_source_language_get_globs(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_metadata(IntPtr raw, IntPtr name);

		public string GetMetadata(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = gtk_source_language_get_metadata(Handle, native_name);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_mime_types(IntPtr raw);

		public string[] MimeTypes { 
			get {
				IntPtr raw_ret = gtk_source_language_get_mime_types(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_style_fallback(IntPtr raw, IntPtr style_id);

		public string GetStyleFallback(string style_id) {
			IntPtr native_style_id = GLib.Marshaller.StringToPtrGStrdup (style_id);
			IntPtr raw_ret = gtk_source_language_get_style_fallback(Handle, native_style_id);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_style_id);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_style_ids(IntPtr raw);

		public string[] StyleIds { 
			get {
				IntPtr raw_ret = gtk_source_language_get_style_ids(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, true);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_get_style_name(IntPtr raw, IntPtr style_id);

		public string GetStyleName(string style_id) {
			IntPtr native_style_id = GLib.Marshaller.StringToPtrGStrdup (style_id);
			IntPtr raw_ret = gtk_source_language_get_style_name(Handle, native_style_id);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_style_id);
			return ret;
		}

#endregion
	}
}
