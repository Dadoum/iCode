// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class LanguageManager : GLib.Object {

		public LanguageManager (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_new();

		public LanguageManager () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (LanguageManager)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_language_manager_new();
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_languagemanager_get_parent_instance_offset ();

		static uint parent_instance_offset = gtksourcesharp_gtksource_languagemanager_get_parent_instance_offset ();
		public GLib.Object ParentInstance {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_instance_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceLanguageManagerClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceLanguageManagerClass> class_structs;

		static GtkSourceLanguageManagerClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceLanguageManagerClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceLanguageManagerClass class_struct = (GtkSourceLanguageManagerClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceLanguageManagerClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceLanguageManagerClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_language_manager_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_default();

		public static GtkSource.LanguageManager Default { 
			get {
				IntPtr raw_ret = gtk_source_language_manager_get_default();
				GtkSource.LanguageManager ret = GLib.Object.GetObject(raw_ret) as GtkSource.LanguageManager;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_language(IntPtr raw, IntPtr id);

		public GtkSource.Language GetLanguage(string id) {
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr raw_ret = gtk_source_language_manager_get_language(Handle, native_id);
			GtkSource.Language ret = GLib.Object.GetObject(raw_ret) as GtkSource.Language;
			GLib.Marshaller.Free (native_id);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_language_ids(IntPtr raw);

		public string[] LanguageIds { 
			get {
				IntPtr raw_ret = gtk_source_language_manager_get_language_ids(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_search_path(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_language_manager_set_search_path(IntPtr raw, IntPtr[] dirs);

		public string[] SearchPath { 
			get {
				IntPtr raw_ret = gtk_source_language_manager_get_search_path(Handle);
				string[] ret = GLib.Marshaller.NullTermPtrToStringArray (raw_ret, false);
				return ret;
			}
			set {
				int cnt_value = value == null ? 0 : value.Length;
				IntPtr[] native_value = new IntPtr [cnt_value + 1];
				for (int i = 0; i < cnt_value; i++)
					native_value [i] = GLib.Marshaller.StringToPtrGStrdup (value[i]);
				native_value [cnt_value] = IntPtr.Zero;
				gtk_source_language_manager_set_search_path(Handle, native_value);
				for (int i = 0; i < native_value.Length - 1; i++) {
					value [i] = GLib.Marshaller.Utf8PtrToString (native_value[i]);
					GLib.Marshaller.Free (native_value[i]);
				}
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_guess_language(IntPtr raw, IntPtr filename, IntPtr content_type);

		public GtkSource.Language GuessLanguage(string filename, string content_type) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr native_content_type = GLib.Marshaller.StringToPtrGStrdup (content_type);
			IntPtr raw_ret = gtk_source_language_manager_guess_language(Handle, native_filename, native_content_type);
			GtkSource.Language ret = GLib.Object.GetObject(raw_ret) as GtkSource.Language;
			GLib.Marshaller.Free (native_filename);
			GLib.Marshaller.Free (native_content_type);
			return ret;
		}

		public GtkSource.Language GuessLanguage() {
			return GuessLanguage (null, null);
		}

#endregion
	}
}
