// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class MarkAttributes : GLib.Object {

		public MarkAttributes (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_attributes_new();

		public MarkAttributes () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (MarkAttributes)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_mark_attributes_new();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_attributes_get_icon_name(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_mark_attributes_set_icon_name(IntPtr raw, IntPtr icon_name);

		[GLib.Property ("icon-name")]
		public string IconName {
			get  {
				IntPtr raw_ret = gtk_source_mark_attributes_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_mark_attributes_set_icon_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Signal("query-tooltip-text")]
		public event GtkSource.QueryTooltipTextHandler QueryTooltipText {
			add {
				this.AddSignalHandler ("query-tooltip-text", value, typeof (GtkSource.QueryTooltipTextArgs));
			}
			remove {
				this.RemoveSignalHandler ("query-tooltip-text", value);
			}
		}

		[GLib.Signal("query-tooltip-markup")]
		public event GtkSource.QueryTooltipMarkupHandler QueryTooltipMarkup {
			add {
				this.AddSignalHandler ("query-tooltip-markup", value, typeof (GtkSource.QueryTooltipMarkupArgs));
			}
			remove {
				this.RemoveSignalHandler ("query-tooltip-markup", value);
			}
		}

		static QueryTooltipMarkupNativeDelegate QueryTooltipMarkup_cb_delegate;
		static QueryTooltipMarkupNativeDelegate QueryTooltipMarkupVMCallback {
			get {
				if (QueryTooltipMarkup_cb_delegate == null)
					QueryTooltipMarkup_cb_delegate = new QueryTooltipMarkupNativeDelegate (QueryTooltipMarkup_cb);
				return QueryTooltipMarkup_cb_delegate;
			}
		}

		static void OverrideQueryTooltipMarkup (GLib.GType gtype)
		{
			OverrideQueryTooltipMarkup (gtype, QueryTooltipMarkupVMCallback);
		}

		static void OverrideQueryTooltipMarkup (GLib.GType gtype, QueryTooltipMarkupNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "query-tooltip-markup", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr QueryTooltipMarkupNativeDelegate (IntPtr inst, IntPtr mark);

		static IntPtr QueryTooltipMarkup_cb (IntPtr inst, IntPtr mark)
		{
			try {
				MarkAttributes __obj = GLib.Object.GetObject (inst, false) as MarkAttributes;
				string __result;
				__result = __obj.OnQueryTooltipMarkup (GLib.Object.GetObject(mark) as GtkSource.Mark);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.MarkAttributes), ConnectionMethod="OverrideQueryTooltipMarkup")]
		protected virtual string OnQueryTooltipMarkup (GtkSource.Mark mark)
		{
			return InternalQueryTooltipMarkup (mark);
		}

		private string InternalQueryTooltipMarkup (GtkSource.Mark mark)
		{
			GLib.Value ret = new GLib.Value (GLib.GType.String);
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (mark);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
			string result = (string) ret;
			ret.Dispose ();
			return result;
		}

		static QueryTooltipTextNativeDelegate QueryTooltipText_cb_delegate;
		static QueryTooltipTextNativeDelegate QueryTooltipTextVMCallback {
			get {
				if (QueryTooltipText_cb_delegate == null)
					QueryTooltipText_cb_delegate = new QueryTooltipTextNativeDelegate (QueryTooltipText_cb);
				return QueryTooltipText_cb_delegate;
			}
		}

		static void OverrideQueryTooltipText (GLib.GType gtype)
		{
			OverrideQueryTooltipText (gtype, QueryTooltipTextVMCallback);
		}

		static void OverrideQueryTooltipText (GLib.GType gtype, QueryTooltipTextNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "query-tooltip-text", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr QueryTooltipTextNativeDelegate (IntPtr inst, IntPtr mark);

		static IntPtr QueryTooltipText_cb (IntPtr inst, IntPtr mark)
		{
			try {
				MarkAttributes __obj = GLib.Object.GetObject (inst, false) as MarkAttributes;
				string __result;
				__result = __obj.OnQueryTooltipText (GLib.Object.GetObject(mark) as GtkSource.Mark);
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.MarkAttributes), ConnectionMethod="OverrideQueryTooltipText")]
		protected virtual string OnQueryTooltipText (GtkSource.Mark mark)
		{
			return InternalQueryTooltipText (mark);
		}

		private string InternalQueryTooltipText (GtkSource.Mark mark)
		{
			GLib.Value ret = new GLib.Value (GLib.GType.String);
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (mark);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
			string result = (string) ret;
			ret.Dispose ();
			return result;
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceMarkAttributesClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceMarkAttributesClass> class_structs;

		static GtkSourceMarkAttributesClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceMarkAttributesClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceMarkAttributesClass class_struct = (GtkSourceMarkAttributesClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceMarkAttributesClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceMarkAttributesClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_attributes_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_mark_attributes_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_attributes_get_tooltip_markup(IntPtr raw, IntPtr mark);

		public string GetTooltipMarkup(GtkSource.Mark mark) {
			IntPtr raw_ret = gtk_source_mark_attributes_get_tooltip_markup(Handle, mark == null ? IntPtr.Zero : mark.Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_mark_attributes_get_tooltip_text(IntPtr raw, IntPtr mark);

		public string GetTooltipText(GtkSource.Mark mark) {
			IntPtr raw_ret = gtk_source_mark_attributes_get_tooltip_text(Handle, mark == null ? IntPtr.Zero : mark.Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

#endregion
	}
}
