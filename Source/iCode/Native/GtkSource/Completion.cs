// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class Completion : GLib.Object {

		public Completion (IntPtr raw) : base(raw) {}

		protected Completion() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("accelerators")]
		public uint Accelerators {
			get {
				GLib.Value val = GetProperty ("accelerators");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("accelerators", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("auto-complete-delay")]
		public uint AutoCompleteDelay {
			get {
				GLib.Value val = GetProperty ("auto-complete-delay");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("auto-complete-delay", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("proposal-page-size")]
		public uint ProposalPageSize {
			get {
				GLib.Value val = GetProperty ("proposal-page-size");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("proposal-page-size", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("provider-page-size")]
		public uint ProviderPageSize {
			get {
				GLib.Value val = GetProperty ("provider-page-size");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("provider-page-size", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("remember-info-visibility")]
		public bool RememberInfoVisibility {
			get {
				GLib.Value val = GetProperty ("remember-info-visibility");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("remember-info-visibility", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("select-on-show")]
		public bool SelectOnShow {
			get {
				GLib.Value val = GetProperty ("select-on-show");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("select-on-show", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("show-headers")]
		public bool ShowHeaders {
			get {
				GLib.Value val = GetProperty ("show-headers");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("show-headers", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("show-icons")]
		public bool ShowIcons {
			get {
				GLib.Value val = GetProperty ("show-icons");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("show-icons", val);
				val.Dispose ();
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_get_view(IntPtr raw);

		[GLib.Property ("view")]
		public GtkSource.View View {
			get  {
				IntPtr raw_ret = gtk_source_completion_get_view(Handle);
				GtkSource.View ret = GLib.Object.GetObject(raw_ret) as GtkSource.View;
				return ret;
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_completion_get_parent_instance_offset ();

		static uint parent_instance_offset = gtksourcesharp_gtksource_completion_get_parent_instance_offset ();
		public GLib.Object ParentInstance {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_instance_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[GLib.Signal("populate-context")]
		public event GtkSource.PopulateContextHandler PopulateContext {
			add {
				this.AddSignalHandler ("populate-context", value, typeof (GtkSource.PopulateContextArgs));
			}
			remove {
				this.RemoveSignalHandler ("populate-context", value);
			}
		}

		[GLib.Signal("show")]
		public event System.EventHandler Show {
			add {
				this.AddSignalHandler ("show", value);
			}
			remove {
				this.RemoveSignalHandler ("show", value);
			}
		}

		[GLib.Signal("hide")]
		public event System.EventHandler HideEvent {
			add {
				this.AddSignalHandler ("hide", value);
			}
			remove {
				this.RemoveSignalHandler ("hide", value);
			}
		}

		[GLib.Signal("activate-proposal")]
		public event System.EventHandler ActivateProposal {
			add {
				this.AddSignalHandler ("activate-proposal", value);
			}
			remove {
				this.RemoveSignalHandler ("activate-proposal", value);
			}
		}

		static ProposalActivatedNativeDelegate ProposalActivated_cb_delegate;
		static ProposalActivatedNativeDelegate ProposalActivatedVMCallback {
			get {
				if (ProposalActivated_cb_delegate == null)
					ProposalActivated_cb_delegate = new ProposalActivatedNativeDelegate (ProposalActivated_cb);
				return ProposalActivated_cb_delegate;
			}
		}

		static void OverrideProposalActivated (GLib.GType gtype)
		{
			OverrideProposalActivated (gtype, ProposalActivatedVMCallback);
		}

		static void OverrideProposalActivated (GLib.GType gtype, ProposalActivatedNativeDelegate callback)
		{
			GtkSourceCompletionClass class_iface = GetClassStruct (gtype, false);
			class_iface.ProposalActivated = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool ProposalActivatedNativeDelegate (IntPtr inst, IntPtr provider, IntPtr proposal);

		static bool ProposalActivated_cb (IntPtr inst, IntPtr provider, IntPtr proposal)
		{
			try {
				Completion __obj = GLib.Object.GetObject (inst, false) as Completion;
				bool __result;
				__result = __obj.OnProposalActivated (GtkSource.CompletionProviderAdapter.GetObject (provider, false), GtkSource.CompletionProposalAdapter.GetObject (proposal, false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.Completion), ConnectionMethod="OverrideProposalActivated")]
		protected virtual bool OnProposalActivated (GtkSource.ICompletionProvider provider, GtkSource.ICompletionProposal proposal)
		{
			return InternalProposalActivated (provider, proposal);
		}

		private bool InternalProposalActivated (GtkSource.ICompletionProvider provider, GtkSource.ICompletionProposal proposal)
		{
			ProposalActivatedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ProposalActivated;
			if (unmanaged == null) return false;

			bool __result = unmanaged (this.Handle, provider == null ? IntPtr.Zero : ((provider is GLib.Object) ? (provider as GLib.Object).Handle : (provider as GtkSource.CompletionProviderAdapter).Handle), proposal == null ? IntPtr.Zero : ((proposal is GLib.Object) ? (proposal as GLib.Object).Handle : (proposal as GtkSource.CompletionProposalAdapter).Handle));
			return __result;
		}

		static ShowNativeDelegate Show_cb_delegate;
		static ShowNativeDelegate ShowVMCallback {
			get {
				if (Show_cb_delegate == null)
					Show_cb_delegate = new ShowNativeDelegate (Show_cb);
				return Show_cb_delegate;
			}
		}

		static void OverrideShow (GLib.GType gtype)
		{
			OverrideShow (gtype, ShowVMCallback);
		}

		static void OverrideShow (GLib.GType gtype, ShowNativeDelegate callback)
		{
			GtkSourceCompletionClass class_iface = GetClassStruct (gtype, false);
			class_iface.Show = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ShowNativeDelegate (IntPtr inst);

		static void Show_cb (IntPtr inst)
		{
			try {
				Completion __obj = GLib.Object.GetObject (inst, false) as Completion;
				__obj.OnShow ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.Completion), ConnectionMethod="OverrideShow")]
		protected virtual void OnShow ()
		{
			InternalShow ();
		}

		private void InternalShow ()
		{
			ShowNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Show;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static HideEventNativeDelegate HideEvent_cb_delegate;
		static HideEventNativeDelegate HideEventVMCallback {
			get {
				if (HideEvent_cb_delegate == null)
					HideEvent_cb_delegate = new HideEventNativeDelegate (HideEvent_cb);
				return HideEvent_cb_delegate;
			}
		}

		static void OverrideHideEvent (GLib.GType gtype)
		{
			OverrideHideEvent (gtype, HideEventVMCallback);
		}

		static void OverrideHideEvent (GLib.GType gtype, HideEventNativeDelegate callback)
		{
			GtkSourceCompletionClass class_iface = GetClassStruct (gtype, false);
			class_iface.HideEvent = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void HideEventNativeDelegate (IntPtr inst);

		static void HideEvent_cb (IntPtr inst)
		{
			try {
				Completion __obj = GLib.Object.GetObject (inst, false) as Completion;
				__obj.OnHideEvent ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.Completion), ConnectionMethod="OverrideHideEvent")]
		protected virtual void OnHideEvent ()
		{
			InternalHideEvent ();
		}

		private void InternalHideEvent ()
		{
			HideEventNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).HideEvent;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static PopulateContextNativeDelegate PopulateContext_cb_delegate;
		static PopulateContextNativeDelegate PopulateContextVMCallback {
			get {
				if (PopulateContext_cb_delegate == null)
					PopulateContext_cb_delegate = new PopulateContextNativeDelegate (PopulateContext_cb);
				return PopulateContext_cb_delegate;
			}
		}

		static void OverridePopulateContext (GLib.GType gtype)
		{
			OverridePopulateContext (gtype, PopulateContextVMCallback);
		}

		static void OverridePopulateContext (GLib.GType gtype, PopulateContextNativeDelegate callback)
		{
			GtkSourceCompletionClass class_iface = GetClassStruct (gtype, false);
			class_iface.PopulateContext = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PopulateContextNativeDelegate (IntPtr inst, IntPtr context);

		static void PopulateContext_cb (IntPtr inst, IntPtr context)
		{
			try {
				Completion __obj = GLib.Object.GetObject (inst, false) as Completion;
				__obj.OnPopulateContext (GLib.Object.GetObject(context) as GtkSource.CompletionContext);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.Completion), ConnectionMethod="OverridePopulateContext")]
		protected virtual void OnPopulateContext (GtkSource.CompletionContext context)
		{
			InternalPopulateContext (context);
		}

		private void InternalPopulateContext (GtkSource.CompletionContext context)
		{
			PopulateContextNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).PopulateContext;
			if (unmanaged == null) return;

			unmanaged (this.Handle, context == null ? IntPtr.Zero : context.Handle);
		}

		static ActivateProposalNativeDelegate ActivateProposal_cb_delegate;
		static ActivateProposalNativeDelegate ActivateProposalVMCallback {
			get {
				if (ActivateProposal_cb_delegate == null)
					ActivateProposal_cb_delegate = new ActivateProposalNativeDelegate (ActivateProposal_cb);
				return ActivateProposal_cb_delegate;
			}
		}

		static void OverrideActivateProposal (GLib.GType gtype)
		{
			OverrideActivateProposal (gtype, ActivateProposalVMCallback);
		}

		static void OverrideActivateProposal (GLib.GType gtype, ActivateProposalNativeDelegate callback)
		{
			GtkSourceCompletionClass class_iface = GetClassStruct (gtype, false);
			class_iface.ActivateProposal = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivateProposalNativeDelegate (IntPtr inst);

		static void ActivateProposal_cb (IntPtr inst)
		{
			try {
				Completion __obj = GLib.Object.GetObject (inst, false) as Completion;
				__obj.OnActivateProposal ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.Completion), ConnectionMethod="OverrideActivateProposal")]
		protected virtual void OnActivateProposal ()
		{
			InternalActivateProposal ();
		}

		private void InternalActivateProposal ()
		{
			ActivateProposalNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ActivateProposal;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceCompletionClass {
			public ProposalActivatedNativeDelegate ProposalActivated;
			public ShowNativeDelegate Show;
			public HideEventNativeDelegate HideEvent;
			public PopulateContextNativeDelegate PopulateContext;
			IntPtr MoveCursor;
			IntPtr MovePage;
			public ActivateProposalNativeDelegate ActivateProposal;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=20)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceCompletionClass> class_structs;

		static GtkSourceCompletionClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceCompletionClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceCompletionClass class_struct = (GtkSourceCompletionClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceCompletionClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceCompletionClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_completion_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_source_completion_add_provider(IntPtr raw, IntPtr provider, out IntPtr error);

		public unsafe bool AddProvider(GtkSource.ICompletionProvider provider) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_source_completion_add_provider(Handle, provider == null ? IntPtr.Zero : ((provider is GLib.Object) ? (provider as GLib.Object).Handle : (provider as GtkSource.CompletionProviderAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_block_interactive(IntPtr raw);

		public void BlockInteractive() {
			gtk_source_completion_block_interactive(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_get_info_window(IntPtr raw);

		public GtkSource.CompletionInfo InfoWindow { 
			get {
				IntPtr raw_ret = gtk_source_completion_get_info_window(Handle);
				GtkSource.CompletionInfo ret = GLib.Object.GetObject(raw_ret) as GtkSource.CompletionInfo;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_get_providers(IntPtr raw);

		public GtkSource.ICompletionProvider[] Providers { 
			get {
				IntPtr raw_ret = gtk_source_completion_get_providers(Handle);
				GtkSource.ICompletionProvider[] ret = (GtkSource.ICompletionProvider[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(GtkSource.ICompletionProvider));
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_hide(IntPtr raw);

		public void Hide() {
			gtk_source_completion_hide(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gtk_source_completion_remove_provider(IntPtr raw, IntPtr provider, out IntPtr error);

		public unsafe bool RemoveProvider(GtkSource.ICompletionProvider provider) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gtk_source_completion_remove_provider(Handle, provider == null ? IntPtr.Zero : ((provider is GLib.Object) ? (provider as GLib.Object).Handle : (provider as GtkSource.CompletionProviderAdapter).Handle), out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_completion_start(IntPtr raw, IntPtr providers, IntPtr context);

		public bool Start(GLib.List providers, GtkSource.CompletionContext context) {
			bool raw_ret = gtk_source_completion_start(Handle, providers == null ? IntPtr.Zero : providers.Handle, context == null ? IntPtr.Zero : context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		public bool Start(GtkSource.CompletionContext context) {
			return Start (null, context);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_unblock_interactive(IntPtr raw);

		public void UnblockInteractive() {
			gtk_source_completion_unblock_interactive(Handle);
		}

#endregion
	}
}
