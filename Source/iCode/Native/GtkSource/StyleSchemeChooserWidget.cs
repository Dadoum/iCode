// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class StyleSchemeChooserWidget : Gtk.Bin, GtkSource.IStyleSchemeChooser {

		public StyleSchemeChooserWidget (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_chooser_widget_new();

		public StyleSchemeChooserWidget () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (StyleSchemeChooserWidget)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_style_scheme_chooser_widget_new();
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_styleschemechooserwidget_get_parent_offset ();

		static uint parent_offset = gtksourcesharp_gtksource_styleschemechooserwidget_get_parent_offset ();
		public new Gtk.Bin Parent {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Bin;
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceStyleSchemeChooserWidgetClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.Bin)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceStyleSchemeChooserWidgetClass> class_structs;

		static GtkSourceStyleSchemeChooserWidgetClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceStyleSchemeChooserWidgetClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceStyleSchemeChooserWidgetClass class_struct = (GtkSourceStyleSchemeChooserWidgetClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceStyleSchemeChooserWidgetClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceStyleSchemeChooserWidgetClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_chooser_widget_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_style_scheme_chooser_widget_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_chooser_get_style_scheme(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_style_scheme_chooser_set_style_scheme(IntPtr raw, IntPtr scheme);

		[GLib.Property ("style-scheme")]
		public GtkSource.StyleScheme StyleScheme {
			get  {
				IntPtr raw_ret = gtk_source_style_scheme_chooser_get_style_scheme(Handle);
				GtkSource.StyleScheme ret = GLib.Object.GetObject(raw_ret) as GtkSource.StyleScheme;
				return ret;
			}
			set  {
				gtk_source_style_scheme_chooser_set_style_scheme(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}


		static StyleSchemeChooserWidget ()
		{
			ObjectManager.Initialize ();
		}
#endregion
	}
}
