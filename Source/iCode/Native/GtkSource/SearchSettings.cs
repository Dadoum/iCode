// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class SearchSettings : GLib.Object {

		public SearchSettings (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_settings_new();

		public SearchSettings () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SearchSettings)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_search_settings_new();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_search_settings_get_at_word_boundaries(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_search_settings_set_at_word_boundaries(IntPtr raw, bool at_word_boundaries);

		[GLib.Property ("at-word-boundaries")]
		public bool AtWordBoundaries {
			get  {
				bool raw_ret = gtk_source_search_settings_get_at_word_boundaries(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_settings_set_at_word_boundaries(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_search_settings_get_case_sensitive(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_search_settings_set_case_sensitive(IntPtr raw, bool case_sensitive);

		[GLib.Property ("case-sensitive")]
		public bool CaseSensitive {
			get  {
				bool raw_ret = gtk_source_search_settings_get_case_sensitive(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_settings_set_case_sensitive(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_search_settings_get_regex_enabled(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_search_settings_set_regex_enabled(IntPtr raw, bool regex_enabled);

		[GLib.Property ("regex-enabled")]
		public bool RegexEnabled {
			get  {
				bool raw_ret = gtk_source_search_settings_get_regex_enabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_settings_set_regex_enabled(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_settings_get_search_text(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_search_settings_set_search_text(IntPtr raw, IntPtr search_text);

		[GLib.Property ("search-text")]
		public string SearchText {
			get  {
				IntPtr raw_ret = gtk_source_search_settings_get_search_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_search_settings_set_search_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_search_settings_get_wrap_around(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_search_settings_set_wrap_around(IntPtr raw, bool wrap_around);

		[GLib.Property ("wrap-around")]
		public bool WrapAround {
			get  {
				bool raw_ret = gtk_source_search_settings_get_wrap_around(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_settings_set_wrap_around(Handle, value);
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_searchsettings_get_parent_offset ();

		static uint parent_offset = gtksourcesharp_gtksource_searchsettings_get_parent_offset ();
		public GLib.Object Parent {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceSearchSettingsClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceSearchSettingsClass> class_structs;

		static GtkSourceSearchSettingsClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceSearchSettingsClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceSearchSettingsClass class_struct = (GtkSourceSearchSettingsClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceSearchSettingsClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceSearchSettingsClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_settings_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_search_settings_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
