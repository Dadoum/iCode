// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class FileSaver : GLib.Object {

		public FileSaver (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_saver_new(IntPtr buffer, IntPtr file);

		public FileSaver (GtkSource.Buffer buffer, GtkSource.File file) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (FileSaver)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				if (file != null) {
					names.Add ("file");
					vals.Add (new GLib.Value (file));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_source_file_saver_new(buffer == null ? IntPtr.Zero : buffer.Handle, file == null ? IntPtr.Zero : file.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_saver_get_buffer(IntPtr raw);

		[GLib.Property ("buffer")]
		public GtkSource.Buffer Buffer {
			get  {
				IntPtr raw_ret = gtk_source_file_saver_get_buffer(Handle);
				GtkSource.Buffer ret = GLib.Object.GetObject(raw_ret) as GtkSource.Buffer;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_saver_get_compression_type(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_file_saver_set_compression_type(IntPtr raw, int compression_type);

		[GLib.Property ("compression-type")]
		public GtkSource.CompressionType CompressionType {
			get  {
				int raw_ret = gtk_source_file_saver_get_compression_type(Handle);
				GtkSource.CompressionType ret = (GtkSource.CompressionType) raw_ret;
				return ret;
			}
			set  {
				gtk_source_file_saver_set_compression_type(Handle, (int) value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_saver_get_encoding(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_file_saver_set_encoding(IntPtr raw, IntPtr value);

		[GLib.Property ("encoding")]
		public GtkSource.Encoding Encoding {
			get  {
				IntPtr raw_ret = gtk_source_file_saver_get_encoding(Handle);
				GtkSource.Encoding ret = GtkSource.Encoding.New (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gtk_source_file_saver_set_encoding(Handle, native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_saver_get_file(IntPtr raw);

		[GLib.Property ("file")]
		public GtkSource.File File {
			get  {
				IntPtr raw_ret = gtk_source_file_saver_get_file(Handle);
				GtkSource.File ret = GLib.Object.GetObject(raw_ret) as GtkSource.File;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_saver_get_flags(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_file_saver_set_flags(IntPtr raw, int flags);

		[GLib.Property ("flags")]
		public GtkSource.FileSaverFlags Flags {
			get  {
				int raw_ret = gtk_source_file_saver_get_flags(Handle);
				GtkSource.FileSaverFlags ret = (GtkSource.FileSaverFlags) raw_ret;
				return ret;
			}
			set  {
				gtk_source_file_saver_set_flags(Handle, (int) value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_saver_get_newline_type(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_file_saver_set_newline_type(IntPtr raw, int newline_type);

		[GLib.Property ("newline-type")]
		public GtkSource.NewlineType NewlineType {
			get  {
				int raw_ret = gtk_source_file_saver_get_newline_type(Handle);
				GtkSource.NewlineType ret = (GtkSource.NewlineType) raw_ret;
				return ret;
			}
			set  {
				gtk_source_file_saver_set_newline_type(Handle, (int) value);
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_filesaver_get_object_offset ();

		static uint object_offset = gtksourcesharp_gtksource_filesaver_get_object_offset ();
		public GLib.Object Object {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + object_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceFileSaverClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceFileSaverClass> class_structs;

		static GtkSourceFileSaverClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceFileSaverClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceFileSaverClass class_struct = (GtkSourceFileSaverClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceFileSaverClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceFileSaverClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_saver_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_file_saver_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
