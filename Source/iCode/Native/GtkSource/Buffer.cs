// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Gtk;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class Buffer : TextBuffer {

		public Buffer (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_new_with_language(IntPtr language);

		public Buffer (GtkSource.Language language) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Buffer)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (language != null) {
					names.Add ("language");
					vals.Add (new GLib.Value (language));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_source_buffer_new_with_language(language == null ? IntPtr.Zero : language.Handle);
		}

		[GLib.Property ("can-redo")]
		public bool CanRedoProp
       {
			get {
				GLib.Value val = GetProperty ("can-redo");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("can-undo")]
		public bool CanUndoProp
       {
			get {
				GLib.Value val = GetProperty ("can-undo");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_get_highlight_matching_brackets(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_highlight_matching_brackets(IntPtr raw, bool highlight);

		[GLib.Property ("highlight-matching-brackets")]
		public bool HighlightMatchingBrackets {
			get  {
				bool raw_ret = gtk_source_buffer_get_highlight_matching_brackets(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_buffer_set_highlight_matching_brackets(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_get_highlight_syntax(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_highlight_syntax(IntPtr raw, bool highlight);

		[GLib.Property ("highlight-syntax")]
		public bool HighlightSyntax {
			get  {
				bool raw_ret = gtk_source_buffer_get_highlight_syntax(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_buffer_set_highlight_syntax(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_get_implicit_trailing_newline(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_implicit_trailing_newline(IntPtr raw, bool implicit_trailing_newline);

		[GLib.Property ("implicit-trailing-newline")]
		public bool ImplicitTrailingNewline {
			get  {
				bool raw_ret = gtk_source_buffer_get_implicit_trailing_newline(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_buffer_set_implicit_trailing_newline(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_language(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_language(IntPtr raw, IntPtr language);

		[GLib.Property ("language")]
		public GtkSource.Language Language {
			get  {
				IntPtr raw_ret = gtk_source_buffer_get_language(Handle);
				GtkSource.Language ret = GLib.Object.GetObject(raw_ret) as GtkSource.Language;
				return ret;
			}
			set  {
				gtk_source_buffer_set_language(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_buffer_get_max_undo_levels(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_max_undo_levels(IntPtr raw, int max_undo_levels);

		[GLib.Property ("max-undo-levels")]
		public int MaxUndoLevels {
			get  {
				int raw_ret = gtk_source_buffer_get_max_undo_levels(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_buffer_set_max_undo_levels(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_style_scheme(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_style_scheme(IntPtr raw, IntPtr scheme);

		[GLib.Property ("style-scheme")]
		public GtkSource.StyleScheme StyleScheme {
			get  {
				IntPtr raw_ret = gtk_source_buffer_get_style_scheme(Handle);
				GtkSource.StyleScheme ret = GLib.Object.GetObject(raw_ret) as GtkSource.StyleScheme;
				return ret;
			}
			set  {
				gtk_source_buffer_set_style_scheme(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_undo_manager(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_set_undo_manager(IntPtr raw, IntPtr manager);

		[GLib.Property ("undo-manager")]
		public GtkSource.IUndoManager UndoManager {
			get  {
				IntPtr raw_ret = gtk_source_buffer_get_undo_manager(Handle);
				GtkSource.IUndoManager ret = GtkSource.UndoManagerAdapter.GetObject (raw_ret, false);
				return ret;
			}
			set  {
				gtk_source_buffer_set_undo_manager(Handle, value == null ? IntPtr.Zero : ((value is GLib.Object) ? (value as GLib.Object).Handle : (value as GtkSource.UndoManagerAdapter).Handle));
			}
		}

		[GLib.Signal("redo")]
		public event System.EventHandler RedoEvent {
			add {
				this.AddSignalHandler ("redo", value);
			}
			remove {
				this.RemoveSignalHandler ("redo", value);
			}
		}

		[GLib.Signal("undo")]
		public event System.EventHandler UndoEvent {
			add {
				this.AddSignalHandler ("undo", value);
			}
			remove {
				this.RemoveSignalHandler ("undo", value);
			}
		}

		static UndoEventNativeDelegate UndoEvent_cb_delegate;
		static UndoEventNativeDelegate UndoEventVMCallback {
			get {
				if (UndoEvent_cb_delegate == null)
					UndoEvent_cb_delegate = new UndoEventNativeDelegate (UndoEvent_cb);
				return UndoEvent_cb_delegate;
			}
		}

		static void OverrideUndoEvent (GLib.GType gtype)
		{
			OverrideUndoEvent (gtype, UndoEventVMCallback);
		}

		static void OverrideUndoEvent (GLib.GType gtype, UndoEventNativeDelegate callback)
		{
			GtkSourceBufferClass class_iface = GetClassStruct (gtype, false);
			class_iface.UndoEvent = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UndoEventNativeDelegate (IntPtr inst);

		static void UndoEvent_cb (IntPtr inst)
		{
			try {
				Buffer __obj = GLib.Object.GetObject (inst, false) as Buffer;
				__obj.OnUndoEvent ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.Buffer), ConnectionMethod="OverrideUndoEvent")]
		protected virtual void OnUndoEvent ()
		{
			InternalUndoEvent ();
		}

		private void InternalUndoEvent ()
		{
			UndoEventNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).UndoEvent;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static RedoEventNativeDelegate RedoEvent_cb_delegate;
		static RedoEventNativeDelegate RedoEventVMCallback {
			get {
				if (RedoEvent_cb_delegate == null)
					RedoEvent_cb_delegate = new RedoEventNativeDelegate (RedoEvent_cb);
				return RedoEvent_cb_delegate;
			}
		}

		static void OverrideRedoEvent (GLib.GType gtype)
		{
			OverrideRedoEvent (gtype, RedoEventVMCallback);
		}

		static void OverrideRedoEvent (GLib.GType gtype, RedoEventNativeDelegate callback)
		{
			GtkSourceBufferClass class_iface = GetClassStruct (gtype, false);
			class_iface.RedoEvent = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RedoEventNativeDelegate (IntPtr inst);

		static void RedoEvent_cb (IntPtr inst)
		{
			try {
				Buffer __obj = GLib.Object.GetObject (inst, false) as Buffer;
				__obj.OnRedoEvent ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.Buffer), ConnectionMethod="OverrideRedoEvent")]
		protected virtual void OnRedoEvent ()
		{
			InternalRedoEvent ();
		}

		private void InternalRedoEvent ()
		{
			RedoEventNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).RedoEvent;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceBufferClass {
			public UndoEventNativeDelegate UndoEvent;
			public RedoEventNativeDelegate RedoEvent;
			IntPtr BracketMatched;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=20)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceBufferClass> class_structs;

		static GtkSourceBufferClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceBufferClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceBufferClass class_struct = (GtkSourceBufferClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceBufferClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceBufferClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_buffer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_begin_not_undoable_action(IntPtr raw);

		public void BeginNotUndoableAction() {
			gtk_source_buffer_begin_not_undoable_action(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_can_redo(IntPtr raw);

		public bool CanRedo() {
			bool raw_ret = gtk_source_buffer_can_redo(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_buffer_can_undo(IntPtr raw);

		public bool CanUndo() {
			bool raw_ret = gtk_source_buffer_can_undo(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_end_not_undoable_action(IntPtr raw);

		public void EndNotUndoableAction() {
			gtk_source_buffer_end_not_undoable_action(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_buffer_get_source_marks_at_line(IntPtr raw, int line, IntPtr category);

		public GtkSource.Mark[] GetSourceMarksAtLine(int line, string category) {
			IntPtr native_category = GLib.Marshaller.StringToPtrGStrdup (category);
			IntPtr raw_ret = gtk_source_buffer_get_source_marks_at_line(Handle, line, native_category);
			GtkSource.Mark[] ret = (GtkSource.Mark[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, true, typeof(GtkSource.Mark));
			GLib.Marshaller.Free (native_category);
			return ret;
		}

		public GtkSource.Mark[] GetSourceMarksAtLine(int line) {
			return GetSourceMarksAtLine (line, null);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_redo(IntPtr raw);

		public void Redo() {
			gtk_source_buffer_redo(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_buffer_undo(IntPtr raw);

		public void Undo() {
			gtk_source_buffer_undo(Handle);
		}

#endregion
	}
}
