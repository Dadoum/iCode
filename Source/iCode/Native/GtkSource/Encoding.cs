// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct Encoding : IEquatable<Encoding> {


		public static GtkSource.Encoding Zero = new GtkSource.Encoding ();

		public static GtkSource.Encoding New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return GtkSource.Encoding.Zero;
			return (GtkSource.Encoding) Marshal.PtrToStructure (raw, typeof (GtkSource.Encoding));
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_charset(IntPtr raw);

		public string Charset { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				IntPtr raw_ret = gtk_source_encoding_get_charset(this_as_native);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				IntPtr raw_ret = gtk_source_encoding_get_name(this_as_native);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr raw_ret = gtk_source_encoding_to_string(this_as_native);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_all();

		public static GLib.SList[] All { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_all();
				GLib.SList[] ret = (GLib.SList[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, true, typeof(GLib.SList));
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_current();

		public static GtkSource.Encoding Current { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_current();
				GtkSource.Encoding ret = GtkSource.Encoding.New (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_default_candidates();

		public static GLib.SList[] DefaultCandidates { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_default_candidates();
				GLib.SList[] ret = (GLib.SList[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), false, true, typeof(GLib.SList));
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_from_charset(IntPtr charset);

		public static GtkSource.Encoding GetFromCharset(string charset) {
			IntPtr native_charset = GLib.Marshaller.StringToPtrGStrdup (charset);
			IntPtr raw_ret = gtk_source_encoding_get_from_charset(native_charset);
			GtkSource.Encoding ret = GtkSource.Encoding.New (raw_ret);
			GLib.Marshaller.Free (native_charset);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_utf8();

		public static GtkSource.Encoding Utf8 { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_utf8();
				GtkSource.Encoding ret = GtkSource.Encoding.New (raw_ret);
				return ret;
			}
		}

		static void ReadNative (IntPtr native, ref GtkSource.Encoding target)
		{
			target = New (native);
		}

		public bool Equals (Encoding other)
		{
			return true;
		}

		public override bool Equals (object other)
		{
			return other is Encoding && Equals ((Encoding) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode ();
		}

		public static explicit operator GLib.Value (GtkSource.Encoding boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (GtkSource.Encoding.GType);
			val.Val = boxed;
			return val;
		}

		public static explicit operator GtkSource.Encoding (GLib.Value val)
		{
			return (GtkSource.Encoding) val.Val;
		}
#endregion
	}
}
