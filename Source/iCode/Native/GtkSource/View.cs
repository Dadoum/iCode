// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class View : Gtk.TextView { 

		public View (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_view_new();

		public View () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (View)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_view_new();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_view_new_with_buffer(IntPtr buffer);

		public View (GtkSource.Buffer buffer) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (View)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_source_view_new_with_buffer(buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_view_get_auto_indent(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_auto_indent(IntPtr raw, bool enable);

		[GLib.Property ("auto-indent")]
		public bool AutoIndent {
			get  {
				bool raw_ret = gtk_source_view_get_auto_indent(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_auto_indent(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_view_get_background_pattern(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_background_pattern(IntPtr raw, int background_pattern);

		[GLib.Property ("background-pattern")]
		public GtkSource.BackgroundPatternType BackgroundPattern {
			get  {
				int raw_ret = gtk_source_view_get_background_pattern(Handle);
				GtkSource.BackgroundPatternType ret = (GtkSource.BackgroundPatternType) raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_background_pattern(Handle, (int) value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_view_get_completion(IntPtr raw);

		[GLib.Property ("completion")]
		public GtkSource.Completion Completion {
			get  {
				IntPtr raw_ret = gtk_source_view_get_completion(Handle);
				GtkSource.Completion ret = GLib.Object.GetObject(raw_ret) as GtkSource.Completion;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_view_get_highlight_current_line(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_highlight_current_line(IntPtr raw, bool highlight);

		[GLib.Property ("highlight-current-line")]
		public bool HighlightCurrentLine {
			get  {
				bool raw_ret = gtk_source_view_get_highlight_current_line(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_highlight_current_line(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_view_get_indent_on_tab(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_indent_on_tab(IntPtr raw, bool enable);

		[GLib.Property ("indent-on-tab")]
		public bool IndentOnTab {
			get  {
				bool raw_ret = gtk_source_view_get_indent_on_tab(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_indent_on_tab(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_view_get_indent_width(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_indent_width(IntPtr raw, int width);

		[GLib.Property ("indent-width")]
		public int IndentWidth {
			get  {
				int raw_ret = gtk_source_view_get_indent_width(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_indent_width(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_view_get_insert_spaces_instead_of_tabs(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_insert_spaces_instead_of_tabs(IntPtr raw, bool enable);

		[GLib.Property ("insert-spaces-instead-of-tabs")]
		public bool InsertSpacesInsteadOfTabs {
			get  {
				bool raw_ret = gtk_source_view_get_insert_spaces_instead_of_tabs(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_insert_spaces_instead_of_tabs(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_view_get_right_margin_position(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_right_margin_position(IntPtr raw, uint pos);

		[GLib.Property ("right-margin-position")]
		public uint RightMarginPosition {
			get  {
				uint raw_ret = gtk_source_view_get_right_margin_position(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_right_margin_position(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_view_get_show_line_marks(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_show_line_marks(IntPtr raw, bool show);

		[GLib.Property ("show-line-marks")]
		public bool ShowLineMarks {
			get  {
				bool raw_ret = gtk_source_view_get_show_line_marks(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_show_line_marks(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_view_get_show_line_numbers(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_show_line_numbers(IntPtr raw, bool show);

		[GLib.Property ("show-line-numbers")]
		public bool ShowLineNumbers {
			get  {
				bool raw_ret = gtk_source_view_get_show_line_numbers(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_show_line_numbers(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_view_get_show_right_margin(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_show_right_margin(IntPtr raw, bool show);

		[GLib.Property ("show-right-margin")]
		public bool ShowRightMargin {
			get  {
				bool raw_ret = gtk_source_view_get_show_right_margin(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_show_right_margin(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_view_get_smart_backspace(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_smart_backspace(IntPtr raw, bool smart_backspace);

		[GLib.Property ("smart-backspace")]
		public bool SmartBackspace {
			get  {
				bool raw_ret = gtk_source_view_get_smart_backspace(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_smart_backspace(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_view_get_smart_home_end(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_smart_home_end(IntPtr raw, int smart_home_end);

		[GLib.Property ("smart-home-end")]
		public GtkSource.SmartHomeEndType SmartHomeEnd {
			get  {
				int raw_ret = gtk_source_view_get_smart_home_end(Handle);
				GtkSource.SmartHomeEndType ret = (GtkSource.SmartHomeEndType) raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_smart_home_end(Handle, (int) value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_view_get_space_drawer(IntPtr raw);

		[GLib.Property ("space-drawer")]
		public GtkSource.SpaceDrawer SpaceDrawer {
			get  {
				IntPtr raw_ret = gtk_source_view_get_space_drawer(Handle);
				GtkSource.SpaceDrawer ret = GLib.Object.GetObject(raw_ret) as GtkSource.SpaceDrawer;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_view_get_tab_width(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_tab_width(IntPtr raw, uint width);

		[GLib.Property ("tab-width")]
		public uint TabWidth {
			get  {
				uint raw_ret = gtk_source_view_get_tab_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_view_set_tab_width(Handle, value);
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_view_get_parent_offset ();

		static uint parent_offset = gtksourcesharp_gtksource_view_get_parent_offset ();
		public new Gtk.TextView Parent {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.TextView;
				}
			}
		}

		[GLib.Signal("undo")]
		public event System.EventHandler Undo {
			add {
				this.AddSignalHandler ("undo", value);
			}
			remove {
				this.RemoveSignalHandler ("undo", value);
			}
		}

		[GLib.Signal("show-completion")]
		public event System.EventHandler ShowCompletion {
			add {
				this.AddSignalHandler ("show-completion", value);
			}
			remove {
				this.RemoveSignalHandler ("show-completion", value);
			}
		}

		[GLib.Signal("move-words")]
		public event GtkSource.MoveWordsHandler MoveWords {
			add {
				this.AddSignalHandler ("move-words", value, typeof (GtkSource.MoveWordsArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-words", value);
			}
		}

		[GLib.Signal("change-case")]
		public event GtkSource.ChangeCaseHandler ChangeCase {
			add {
				this.AddSignalHandler ("change-case", value, typeof (GtkSource.ChangeCaseArgs));
			}
			remove {
				this.RemoveSignalHandler ("change-case", value);
			}
		}

		[GLib.Signal("move-to-matching-bracket")]
		public event GtkSource.MoveToMatchingBracketHandler MoveToMatchingBracket {
			add {
				this.AddSignalHandler ("move-to-matching-bracket", value, typeof (GtkSource.MoveToMatchingBracketArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-to-matching-bracket", value);
			}
		}

		[GLib.Signal("join-lines")]
		public event System.EventHandler JoinLines {
			add {
				this.AddSignalHandler ("join-lines", value);
			}
			remove {
				this.RemoveSignalHandler ("join-lines", value);
			}
		}

		[GLib.Signal("smart-home-end")]
		public event GtkSource.SmartHomeEndHandler SmartHomeEndEvent {
			add {
				this.AddSignalHandler ("smart-home-end", value, typeof (GtkSource.SmartHomeEndArgs));
			}
			remove {
				this.RemoveSignalHandler ("smart-home-end", value);
			}
		}

		[GLib.Signal("change-number")]
		public event GtkSource.ChangeNumberHandler ChangeNumber {
			add {
				this.AddSignalHandler ("change-number", value, typeof (GtkSource.ChangeNumberArgs));
			}
			remove {
				this.RemoveSignalHandler ("change-number", value);
			}
		}

		[GLib.Signal("line-mark-activated")]
		public event GtkSource.LineMarkActivatedHandler LineMarkActivated {
			add {
				this.AddSignalHandler ("line-mark-activated", value, typeof (GtkSource.LineMarkActivatedArgs));
			}
			remove {
				this.RemoveSignalHandler ("line-mark-activated", value);
			}
		}

		[GLib.Signal("move-lines")]
		public event GtkSource.MoveLinesHandler MoveLines {
			add {
				this.AddSignalHandler ("move-lines", value, typeof (GtkSource.MoveLinesArgs));
			}
			remove {
				this.RemoveSignalHandler ("move-lines", value);
			}
		}

		[GLib.Signal("redo")]
		public event System.EventHandler Redo {
			add {
				this.AddSignalHandler ("redo", value);
			}
			remove {
				this.RemoveSignalHandler ("redo", value);
			}
		}

		static ChangeCaseNativeDelegate ChangeCase_cb_delegate;
		static ChangeCaseNativeDelegate ChangeCaseVMCallback {
			get {
				if (ChangeCase_cb_delegate == null)
					ChangeCase_cb_delegate = new ChangeCaseNativeDelegate (ChangeCase_cb);
				return ChangeCase_cb_delegate;
			}
		}

		static void OverrideChangeCase (GLib.GType gtype)
		{
			OverrideChangeCase (gtype, ChangeCaseVMCallback);
		}

		static void OverrideChangeCase (GLib.GType gtype, ChangeCaseNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "change-case", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangeCaseNativeDelegate (IntPtr inst, int case_type);

		static void ChangeCase_cb (IntPtr inst, int case_type)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnChangeCase ((GtkSource.ChangeCaseType) case_type);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideChangeCase")]
		protected virtual void OnChangeCase (GtkSource.ChangeCaseType case_type)
		{
			InternalChangeCase (case_type);
		}

		private void InternalChangeCase (GtkSource.ChangeCaseType case_type)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (case_type);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static ChangeNumberNativeDelegate ChangeNumber_cb_delegate;
		static ChangeNumberNativeDelegate ChangeNumberVMCallback {
			get {
				if (ChangeNumber_cb_delegate == null)
					ChangeNumber_cb_delegate = new ChangeNumberNativeDelegate (ChangeNumber_cb);
				return ChangeNumber_cb_delegate;
			}
		}

		static void OverrideChangeNumber (GLib.GType gtype)
		{
			OverrideChangeNumber (gtype, ChangeNumberVMCallback);
		}

		static void OverrideChangeNumber (GLib.GType gtype, ChangeNumberNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "change-number", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangeNumberNativeDelegate (IntPtr inst, int count);

		static void ChangeNumber_cb (IntPtr inst, int count)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnChangeNumber (count);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideChangeNumber")]
		protected virtual void OnChangeNumber (int count)
		{
			InternalChangeNumber (count);
		}

		private void InternalChangeNumber (int count)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (count);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static JoinLinesNativeDelegate JoinLines_cb_delegate;
		static JoinLinesNativeDelegate JoinLinesVMCallback {
			get {
				if (JoinLines_cb_delegate == null)
					JoinLines_cb_delegate = new JoinLinesNativeDelegate (JoinLines_cb);
				return JoinLines_cb_delegate;
			}
		}

		static void OverrideJoinLines (GLib.GType gtype)
		{
			OverrideJoinLines (gtype, JoinLinesVMCallback);
		}

		static void OverrideJoinLines (GLib.GType gtype, JoinLinesNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "join-lines", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void JoinLinesNativeDelegate (IntPtr inst);

		static void JoinLines_cb (IntPtr inst)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnJoinLines ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideJoinLines")]
		protected virtual void OnJoinLines ()
		{
			InternalJoinLines ();
		}

		private void InternalJoinLines ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static MoveToMatchingBracketNativeDelegate MoveToMatchingBracket_cb_delegate;
		static MoveToMatchingBracketNativeDelegate MoveToMatchingBracketVMCallback {
			get {
				if (MoveToMatchingBracket_cb_delegate == null)
					MoveToMatchingBracket_cb_delegate = new MoveToMatchingBracketNativeDelegate (MoveToMatchingBracket_cb);
				return MoveToMatchingBracket_cb_delegate;
			}
		}

		static void OverrideMoveToMatchingBracket (GLib.GType gtype)
		{
			OverrideMoveToMatchingBracket (gtype, MoveToMatchingBracketVMCallback);
		}

		static void OverrideMoveToMatchingBracket (GLib.GType gtype, MoveToMatchingBracketNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "move-to-matching-bracket", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveToMatchingBracketNativeDelegate (IntPtr inst, bool extend_selection);

		static void MoveToMatchingBracket_cb (IntPtr inst, bool extend_selection)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnMoveToMatchingBracket (extend_selection);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideMoveToMatchingBracket")]
		protected virtual void OnMoveToMatchingBracket (bool extend_selection)
		{
			InternalMoveToMatchingBracket (extend_selection);
		}

		private void InternalMoveToMatchingBracket (bool extend_selection)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (extend_selection);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static SmartHomeEndNativeDelegate SmartHomeEnd_cb_delegate;
		static SmartHomeEndNativeDelegate SmartHomeEndVMCallback {
			get {
				if (SmartHomeEnd_cb_delegate == null)
					SmartHomeEnd_cb_delegate = new SmartHomeEndNativeDelegate (SmartHomeEnd_cb);
				return SmartHomeEnd_cb_delegate;
			}
		}

		static void OverrideSmartHomeEnd (GLib.GType gtype)
		{
			OverrideSmartHomeEnd (gtype, SmartHomeEndVMCallback);
		}

		static void OverrideSmartHomeEnd (GLib.GType gtype, SmartHomeEndNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "smart-home-end", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SmartHomeEndNativeDelegate (IntPtr inst, IntPtr iter, int count);

		static void SmartHomeEnd_cb (IntPtr inst, IntPtr iter, int count)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnSmartHomeEnd (Gtk.TextIter.New (iter), count);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideSmartHomeEnd")]
		protected virtual void OnSmartHomeEnd (Gtk.TextIter iter, int count)
		{
			InternalSmartHomeEnd (iter, count);
		}

		private void InternalSmartHomeEnd (Gtk.TextIter iter, int count)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (iter);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (count);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		static UndoNativeDelegate Undo_cb_delegate;
		static UndoNativeDelegate UndoVMCallback {
			get {
				if (Undo_cb_delegate == null)
					Undo_cb_delegate = new UndoNativeDelegate (Undo_cb);
				return Undo_cb_delegate;
			}
		}

		static void OverrideUndo (GLib.GType gtype)
		{
			OverrideUndo (gtype, UndoVMCallback);
		}

		static void OverrideUndo (GLib.GType gtype, UndoNativeDelegate callback)
		{
			GtkSourceViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.Undo = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UndoNativeDelegate (IntPtr inst);

		static void Undo_cb (IntPtr inst)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnUndo ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideUndo")]
		protected virtual void OnUndo ()
		{
			InternalUndo ();
		}

		private void InternalUndo ()
		{
			UndoNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Undo;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static RedoNativeDelegate Redo_cb_delegate;
		static RedoNativeDelegate RedoVMCallback {
			get {
				if (Redo_cb_delegate == null)
					Redo_cb_delegate = new RedoNativeDelegate (Redo_cb);
				return Redo_cb_delegate;
			}
		}

		static void OverrideRedo (GLib.GType gtype)
		{
			OverrideRedo (gtype, RedoVMCallback);
		}

		static void OverrideRedo (GLib.GType gtype, RedoNativeDelegate callback)
		{
			GtkSourceViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.Redo = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RedoNativeDelegate (IntPtr inst);

		static void Redo_cb (IntPtr inst)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnRedo ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideRedo")]
		protected virtual void OnRedo ()
		{
			InternalRedo ();
		}

		private void InternalRedo ()
		{
			RedoNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).Redo;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static LineMarkActivatedNativeDelegate LineMarkActivated_cb_delegate;
		static LineMarkActivatedNativeDelegate LineMarkActivatedVMCallback {
			get {
				if (LineMarkActivated_cb_delegate == null)
					LineMarkActivated_cb_delegate = new LineMarkActivatedNativeDelegate (LineMarkActivated_cb);
				return LineMarkActivated_cb_delegate;
			}
		}

		static void OverrideLineMarkActivated (GLib.GType gtype)
		{
			OverrideLineMarkActivated (gtype, LineMarkActivatedVMCallback);
		}

		static void OverrideLineMarkActivated (GLib.GType gtype, LineMarkActivatedNativeDelegate callback)
		{
			GtkSourceViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.LineMarkActivated = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LineMarkActivatedNativeDelegate (IntPtr inst, IntPtr iter, IntPtr evnt);

		static void LineMarkActivated_cb (IntPtr inst, IntPtr iter, IntPtr evnt)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnLineMarkActivated (Gtk.TextIter.New (iter), Gdk.Event.GetEvent (evnt));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideLineMarkActivated")]
		protected virtual void OnLineMarkActivated (Gtk.TextIter iter, Gdk.Event evnt)
		{
			InternalLineMarkActivated (iter, evnt);
		}

		private void InternalLineMarkActivated (Gtk.TextIter iter, Gdk.Event evnt)
		{
			LineMarkActivatedNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).LineMarkActivated;
			if (unmanaged == null) return;

			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			unmanaged (this.Handle, native_iter, evnt == null ? IntPtr.Zero : evnt.Handle);
			Marshal.FreeHGlobal (native_iter);
		}

		static ShowCompletionNativeDelegate ShowCompletion_cb_delegate;
		static ShowCompletionNativeDelegate ShowCompletionVMCallback {
			get {
				if (ShowCompletion_cb_delegate == null)
					ShowCompletion_cb_delegate = new ShowCompletionNativeDelegate (ShowCompletion_cb);
				return ShowCompletion_cb_delegate;
			}
		}

		static void OverrideShowCompletion (GLib.GType gtype)
		{
			OverrideShowCompletion (gtype, ShowCompletionVMCallback);
		}

		static void OverrideShowCompletion (GLib.GType gtype, ShowCompletionNativeDelegate callback)
		{
			GtkSourceViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.ShowCompletion = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ShowCompletionNativeDelegate (IntPtr inst);

		static void ShowCompletion_cb (IntPtr inst)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnShowCompletion ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideShowCompletion")]
		protected virtual void OnShowCompletion ()
		{
			InternalShowCompletion ();
		}

		private void InternalShowCompletion ()
		{
			ShowCompletionNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).ShowCompletion;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static MoveLinesNativeDelegate MoveLines_cb_delegate;
		static MoveLinesNativeDelegate MoveLinesVMCallback {
			get {
				if (MoveLines_cb_delegate == null)
					MoveLines_cb_delegate = new MoveLinesNativeDelegate (MoveLines_cb);
				return MoveLines_cb_delegate;
			}
		}

		static void OverrideMoveLines (GLib.GType gtype)
		{
			OverrideMoveLines (gtype, MoveLinesVMCallback);
		}

		static void OverrideMoveLines (GLib.GType gtype, MoveLinesNativeDelegate callback)
		{
			GtkSourceViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.MoveLines = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveLinesNativeDelegate (IntPtr inst, bool down);

		static void MoveLines_cb (IntPtr inst, bool down)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnMoveLines (down);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideMoveLines")]
		protected virtual void OnMoveLines (bool down)
		{
			InternalMoveLines (down);
		}

		private void InternalMoveLines (bool down)
		{
			MoveLinesNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MoveLines;
			if (unmanaged == null) return;

			unmanaged (this.Handle, down);
		}

		static MoveWordsNativeDelegate MoveWords_cb_delegate;
		static MoveWordsNativeDelegate MoveWordsVMCallback {
			get {
				if (MoveWords_cb_delegate == null)
					MoveWords_cb_delegate = new MoveWordsNativeDelegate (MoveWords_cb);
				return MoveWords_cb_delegate;
			}
		}

		static void OverrideMoveWords (GLib.GType gtype)
		{
			OverrideMoveWords (gtype, MoveWordsVMCallback);
		}

		static void OverrideMoveWords (GLib.GType gtype, MoveWordsNativeDelegate callback)
		{
			GtkSourceViewClass class_iface = GetClassStruct (gtype, false);
			class_iface.MoveWords = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveWordsNativeDelegate (IntPtr inst, int count);

		static void MoveWords_cb (IntPtr inst, int count)
		{
			try {
				View __obj = GLib.Object.GetObject (inst, false) as View;
				__obj.OnMoveWords (count);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GtkSource.View), ConnectionMethod="OverrideMoveWords")]
		protected virtual void OnMoveWords (int count)
		{
			InternalMoveWords (count);
		}

		private void InternalMoveWords (int count)
		{
			MoveWordsNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).MoveWords;
			if (unmanaged == null) return;

			unmanaged (this.Handle, count);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceViewClass {
			public UndoNativeDelegate Undo;
			public RedoNativeDelegate Redo;
			public LineMarkActivatedNativeDelegate LineMarkActivated;
			public ShowCompletionNativeDelegate ShowCompletion;
			public MoveLinesNativeDelegate MoveLines;
			public MoveWordsNativeDelegate MoveWords;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=20)]
			public object[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.TextView)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceViewClass> class_structs;

		static GtkSourceViewClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceViewClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceViewClass class_struct = (GtkSourceViewClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceViewClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceViewClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_view_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_view_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_view_get_gutter(IntPtr raw, int window_type);

		public GtkSource.Gutter GetGutter(Gtk.TextWindowType window_type) {
			IntPtr raw_ret = gtk_source_view_get_gutter(Handle, (int) window_type);
			GtkSource.Gutter ret = GLib.Object.GetObject(raw_ret) as GtkSource.Gutter;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_view_get_mark_attributes(IntPtr raw, IntPtr category, int priority);

		public GtkSource.MarkAttributes GetMarkAttributes(string category, int priority) {
			IntPtr native_category = GLib.Marshaller.StringToPtrGStrdup (category);
			IntPtr raw_ret = gtk_source_view_get_mark_attributes(Handle, native_category, priority);
			GtkSource.MarkAttributes ret = GLib.Object.GetObject(raw_ret) as GtkSource.MarkAttributes;
			GLib.Marshaller.Free (native_category);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_view_get_visual_column(IntPtr raw, IntPtr iter);

		public uint GetVisualColumn(Gtk.TextIter iter) {
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			uint raw_ret = gtk_source_view_get_visual_column(Handle, native_iter);
			uint ret = raw_ret;
			Marshal.FreeHGlobal (native_iter);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_indent_lines(IntPtr raw, IntPtr start, IntPtr end);

		public void IndentLines(Gtk.TextIter start, Gtk.TextIter end) {
			IntPtr native_start = GLib.Marshaller.StructureToPtrAlloc (start);
			IntPtr native_end = GLib.Marshaller.StructureToPtrAlloc (end);
			gtk_source_view_indent_lines(Handle, native_start, native_end);
			Marshal.FreeHGlobal (native_start);
			Marshal.FreeHGlobal (native_end);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_set_mark_attributes(IntPtr raw, IntPtr category, IntPtr attributes, int priority);

		public void SetMarkAttributes(string category, GtkSource.MarkAttributes attributes, int priority) {
			IntPtr native_category = GLib.Marshaller.StringToPtrGStrdup (category);
			gtk_source_view_set_mark_attributes(Handle, native_category, attributes == null ? IntPtr.Zero : attributes.Handle, priority);
			GLib.Marshaller.Free (native_category);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_view_unindent_lines(IntPtr raw, IntPtr start, IntPtr end);

		public void UnindentLines(Gtk.TextIter start, Gtk.TextIter end) {
			IntPtr native_start = GLib.Marshaller.StructureToPtrAlloc (start);
			IntPtr native_end = GLib.Marshaller.StructureToPtrAlloc (end);
			gtk_source_view_unindent_lines(Handle, native_start, native_end);
			Marshal.FreeHGlobal (native_start);
			Marshal.FreeHGlobal (native_end);
		}


		static View ()
		{
			ObjectManager.Initialize ();
		}
#endregion
	}
}
