// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace iCode.Native.GtkSource {
	#region Autogenerated code
	public partial class File : GLib.Object {

		public File (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_new();

		public File () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (File)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_file_new();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_get_compression_type(IntPtr raw);

		[GLib.Property ("compression-type")]
		public GtkSource.CompressionType CompressionType {
			get  {
				int raw_ret = gtk_source_file_get_compression_type(Handle);
				GtkSource.CompressionType ret = (GtkSource.CompressionType) raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_get_encoding(IntPtr raw);

		[GLib.Property ("encoding")]
		public GtkSource.Encoding Encoding {
			get  {
				IntPtr raw_ret = gtk_source_file_get_encoding(Handle);
				GtkSource.Encoding ret = GtkSource.Encoding.New (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_get_newline_type(IntPtr raw);

		[GLib.Property ("newline-type")]
		public GtkSource.NewlineType NewlineType {
			get  {
				int raw_ret = gtk_source_file_get_newline_type(Handle);
				GtkSource.NewlineType ret = (GtkSource.NewlineType) raw_ret;
				return ret;
			}
		}

		[GLib.Property ("read-only")]
		public bool ReadOnly {
			get {
				GLib.Value val = GetProperty ("read-only");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport ("libgtksourcesharpglue-4.6.0.so")]
		extern static uint gtksourcesharp_gtksource_file_get_parent_offset ();

		static uint parent_offset = gtksourcesharp_gtksource_file_get_parent_offset ();
		public GLib.Object Parent {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + parent_offset);
					return GLib.Object.GetObject ((*raw_ptr));
				}
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceFileClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			public object[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceFileClass> class_structs;

		static GtkSourceFileClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceFileClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceFileClass class_struct = (GtkSourceFileClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceFileClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceFileClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_file_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_file_check_file_on_disk(IntPtr raw);

		public void CheckFileOnDisk() {
			gtk_source_file_check_file_on_disk(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_file_is_deleted(IntPtr raw);

		public bool IsDeleted { 
			get {
				bool raw_ret = gtk_source_file_is_deleted(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_file_is_externally_modified(IntPtr raw);

		public bool IsExternallyModified { 
			get {
				bool raw_ret = gtk_source_file_is_externally_modified(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_file_is_local(IntPtr raw);

		public bool IsLocal { 
			get {
				bool raw_ret = gtk_source_file_is_local(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_file_is_readonly(IntPtr raw);

		public bool IsReadonly { 
			get {
				bool raw_ret = gtk_source_file_is_readonly(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
