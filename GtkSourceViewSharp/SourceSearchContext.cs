// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceSearchContext : GLib.Object {

		public SourceSearchContext (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_context_new(IntPtr buffer, IntPtr settings);

		public SourceSearchContext (Gtk.SourceBuffer buffer, Gtk.SourceSearchSettings settings) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceSearchContext)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				if (settings != null) {
					names.Add ("settings");
					vals.Add (new GLib.Value (settings));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_source_search_context_new(buffer == null ? IntPtr.Zero : buffer.Handle, settings == null ? IntPtr.Zero : settings.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_context_get_buffer(IntPtr raw);

		[GLib.Property ("buffer")]
		public Gtk.SourceBuffer Buffer {
			get  {
				IntPtr raw_ret = gtk_source_search_context_get_buffer(Handle);
				Gtk.SourceBuffer ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceBuffer;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_context_get_settings(IntPtr raw);

		[GLib.Property ("settings")]
		public Gtk.SourceSearchSettings Settings {
			get  {
				IntPtr raw_ret = gtk_source_search_context_get_settings(Handle);
				Gtk.SourceSearchSettings ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceSearchSettings;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_search_context_get_highlight(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_search_context_set_highlight(IntPtr raw, bool highlight);

		[GLib.Property ("highlight")]
		public bool Highlight {
			get  {
				bool raw_ret = gtk_source_search_context_get_highlight(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_search_context_set_highlight(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_context_get_match_style(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_search_context_set_match_style(IntPtr raw, IntPtr match_style);

		[GLib.Property ("match-style")]
		public Gtk.SourceStyle MatchStyle {
			get  {
				IntPtr raw_ret = gtk_source_search_context_get_match_style(Handle);
				Gtk.SourceStyle ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceStyle;
				return ret;
			}
			set  {
				gtk_source_search_context_set_match_style(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_search_context_get_occurrences_count(IntPtr raw);

		[GLib.Property ("occurrences-count")]
		public int OccurrencesCount {
			get  {
				int raw_ret = gtk_source_search_context_get_occurrences_count(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_context_get_regex_error(IntPtr raw);

		[GLib.Property ("regex-error")]
		public IntPtr RegexError {
			get  {
				IntPtr raw_ret = gtk_source_search_context_get_regex_error(Handle);
				IntPtr ret = raw_ret;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceSearchContextClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceSearchContextClass> class_structs;

		static GtkSourceSearchContextClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceSearchContextClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceSearchContextClass class_struct = (GtkSourceSearchContextClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceSearchContextClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceSearchContextClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_search_context_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_search_context_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe uint gtk_source_search_context_replace_all(IntPtr raw, IntPtr replace, int replace_length, out IntPtr error);

		public unsafe uint ReplaceAll(string replace) {
			IntPtr native_replace = GLib.Marshaller.StringToPtrGStrdup (replace);
			IntPtr error = IntPtr.Zero;
			uint raw_ret = gtk_source_search_context_replace_all(Handle, native_replace, System.Text.Encoding.UTF8.GetByteCount (replace), out error);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_replace);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
