// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceCompletionItem : GLib.Object, Gtk.ISourceCompletionProposal {

		public SourceCompletionItem (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_item_new();

		public SourceCompletionItem () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceCompletionItem)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_completion_item_new();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_item_set_label(IntPtr raw, IntPtr label);

		[GLib.Property ("label")]
		public string Label {
			get {
				GLib.Value val = GetProperty ("label");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_completion_item_set_label(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_item_set_markup(IntPtr raw, IntPtr markup);

		[GLib.Property ("markup")]
		public string Markup {
			get {
				GLib.Value val = GetProperty ("markup");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_completion_item_set_markup(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_item_set_text(IntPtr raw, IntPtr text);

		[GLib.Property ("text")]
		public string Text {
			get {
				GLib.Value val = GetProperty ("text");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_completion_item_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_item_set_icon_name(IntPtr raw, IntPtr icon_name);

		[GLib.Property ("icon-name")]
		public string IconName {
			get {
				GLib.Value val = GetProperty ("icon-name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_completion_item_set_icon_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_item_set_info(IntPtr raw, IntPtr info);

		[GLib.Property ("info")]
		public string Info {
			get {
				GLib.Value val = GetProperty ("info");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_completion_item_set_info(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceCompletionItemClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceCompletionItemClass> class_structs;

		static GtkSourceCompletionItemClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceCompletionItemClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceCompletionItemClass class_struct = (GtkSourceCompletionItemClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceCompletionItemClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceCompletionItemClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_item_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_completion_item_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_proposal_changed(IntPtr raw);

		public void Changed() {
			gtk_source_completion_proposal_changed(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_completion_proposal_equal(IntPtr raw, IntPtr other);

		public bool Equal(Gtk.ISourceCompletionProposal other) {
			bool raw_ret = gtk_source_completion_proposal_equal(Handle, other == null ? IntPtr.Zero : ((other is GLib.Object) ? (other as GLib.Object).Handle : (other as Gtk.SourceCompletionProposalAdapter).Handle));
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_icon_name(IntPtr raw);

		string Gtk.ISourceCompletionProposal.IconName { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_info(IntPtr raw);

		string Gtk.ISourceCompletionProposal.Info { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_info(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_label(IntPtr raw);

		string Gtk.ISourceCompletionProposal.Label { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_label(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_markup(IntPtr raw);

		string Gtk.ISourceCompletionProposal.Markup { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_markup(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_text(IntPtr raw);

		string Gtk.ISourceCompletionProposal.Text { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_text(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_completion_proposal_hash(IntPtr raw);

		public uint Hash() {
			uint raw_ret = gtk_source_completion_proposal_hash(Handle);
			uint ret = raw_ret;
			return ret;
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				this.AddSignalHandler ("changed", value);
			}
			remove {
				this.RemoveSignalHandler ("changed", value);
			}
		}

		static ChangedNativeDelegate Changed_cb_delegate;
		static ChangedNativeDelegate ChangedVMCallback {
			get {
				if (Changed_cb_delegate == null)
					Changed_cb_delegate = new ChangedNativeDelegate (Changed_cb);
				return Changed_cb_delegate;
			}
		}

		static void OverrideChanged (GLib.GType gtype)
		{
			OverrideChanged (gtype, ChangedVMCallback);
		}

		static void OverrideChanged (GLib.GType gtype, ChangedNativeDelegate callback)
		{
			OverrideVirtualMethod (gtype, "changed", callback);
		}
		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedNativeDelegate (IntPtr inst);

		static void Changed_cb (IntPtr inst)
		{
			try {
				Gtk.SourceCompletionItem __obj = GLib.Object.GetObject (inst, false) as Gtk.SourceCompletionItem;
				__obj.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SourceCompletionItem), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			InternalChanged ();
		}

		private void InternalChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

#endregion
	}
}
