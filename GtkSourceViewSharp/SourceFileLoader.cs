// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceFileLoader : GLib.Object {

		public SourceFileLoader (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_loader_new(IntPtr buffer, IntPtr file);

		public SourceFileLoader (Gtk.SourceBuffer buffer, Gtk.SourceFile file) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceFileLoader)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				if (file != null) {
					names.Add ("file");
					vals.Add (new GLib.Value (file));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_source_file_loader_new(buffer == null ? IntPtr.Zero : buffer.Handle, file == null ? IntPtr.Zero : file.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_loader_get_buffer(IntPtr raw);

		[GLib.Property ("buffer")]
		public Gtk.SourceBuffer Buffer {
			get  {
				IntPtr raw_ret = gtk_source_file_loader_get_buffer(Handle);
				Gtk.SourceBuffer ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceBuffer;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_loader_get_file(IntPtr raw);

		[GLib.Property ("file")]
		public Gtk.SourceFile File {
			get  {
				IntPtr raw_ret = gtk_source_file_loader_get_file(Handle);
				Gtk.SourceFile ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceFile;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceFileLoaderClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceFileLoaderClass> class_structs;

		static GtkSourceFileLoaderClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceFileLoaderClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceFileLoaderClass class_struct = (GtkSourceFileLoaderClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceFileLoaderClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceFileLoaderClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_loader_error_quark();

		public static int ErrorQuark() {
			int raw_ret = gtk_source_file_loader_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_loader_get_compression_type(IntPtr raw);

		public Gtk.SourceCompressionType CompressionType { 
			get {
				int raw_ret = gtk_source_file_loader_get_compression_type(Handle);
				Gtk.SourceCompressionType ret = (Gtk.SourceCompressionType) raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_loader_get_encoding(IntPtr raw);

		public Gtk.SourceEncoding Encoding { 
			get {
				IntPtr raw_ret = gtk_source_file_loader_get_encoding(Handle);
				Gtk.SourceEncoding ret = raw_ret == IntPtr.Zero ? null : (Gtk.SourceEncoding) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.SourceEncoding), false);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_file_loader_get_newline_type(IntPtr raw);

		public Gtk.SourceNewlineType NewlineType { 
			get {
				int raw_ret = gtk_source_file_loader_get_newline_type(Handle);
				Gtk.SourceNewlineType ret = (Gtk.SourceNewlineType) raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_file_loader_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_file_loader_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_file_loader_set_candidate_encodings(IntPtr raw, IntPtr candidate_encodings);

		public GLib.SList CandidateEncodings { 
			set {
				gtk_source_file_loader_set_candidate_encodings(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

#endregion
	}
}
