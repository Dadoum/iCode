// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceBufferOutputStream {

		public SourceBufferOutputStream (IntPtr raw) : base(raw) {}

		protected SourceBufferOutputStream() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("buffer")]
		public Gtk.SourceBuffer Buffer {
			get {
				GLib.Value val = GetProperty ("buffer");
				Gtk.SourceBuffer ret = (Gtk.SourceBuffer) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("remove-trailing-newline")]
		public bool RemoveTrailingNewline {
			get {
				GLib.Value val = GetProperty ("remove-trailing-newline");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceBufferOutputStreamClass {
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceBufferOutputStreamClass> class_structs;

		static GtkSourceBufferOutputStreamClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceBufferOutputStreamClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceBufferOutputStreamClass class_struct = (GtkSourceBufferOutputStreamClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceBufferOutputStreamClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceBufferOutputStreamClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

#endregion
	}
}
