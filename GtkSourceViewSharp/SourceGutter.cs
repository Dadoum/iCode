// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceGutter : GLib.Object {

		public SourceGutter (IntPtr raw) : base(raw) {}

		protected SourceGutter() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_gutter_get_view(IntPtr raw);

		[GLib.Property ("view")]
		public Gtk.SourceView View {
			get  {
				IntPtr raw_ret = gtk_source_gutter_get_view(Handle);
				Gtk.SourceView ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceView;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceGutterClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceGutterClass> class_structs;

		static GtkSourceGutterClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceGutterClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceGutterClass class_struct = (GtkSourceGutterClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceGutterClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceGutterClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_gutter_get_renderer_at_pos(IntPtr raw, int x, int y);

		public Gtk.SourceGutterRenderer GetRendererAtPos(int x, int y) {
			IntPtr raw_ret = gtk_source_gutter_get_renderer_at_pos(Handle, x, y);
			Gtk.SourceGutterRenderer ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceGutterRenderer;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_gutter_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_gutter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_gutter_insert(IntPtr raw, IntPtr renderer, int position);

		public bool Insert(Gtk.SourceGutterRenderer renderer, int position) {
			bool raw_ret = gtk_source_gutter_insert(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, position);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_queue_draw(IntPtr raw);

		public void QueueDraw() {
			gtk_source_gutter_queue_draw(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_remove(IntPtr raw, IntPtr renderer);

		public void Remove(Gtk.SourceGutterRenderer renderer) {
			gtk_source_gutter_remove(Handle, renderer == null ? IntPtr.Zero : renderer.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_reorder(IntPtr raw, IntPtr renderer, int position);

		public void Reorder(Gtk.SourceGutterRenderer renderer, int position) {
			gtk_source_gutter_reorder(Handle, renderer == null ? IntPtr.Zero : renderer.Handle, position);
		}

#endregion
	}
}
