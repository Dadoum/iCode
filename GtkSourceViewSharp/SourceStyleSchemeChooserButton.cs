// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceStyleSchemeChooserButton, Gtk.ISourceStyleSchemeChooser {

		public SourceStyleSchemeChooserButton (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_chooser_button_new();

		public SourceStyleSchemeChooserButton () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceStyleSchemeChooserButton)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_style_scheme_chooser_button_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceStyleSchemeChooserButtonClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = 0;
		static Dictionary<GLib.GType, GtkSourceStyleSchemeChooserButtonClass> class_structs;

		static GtkSourceStyleSchemeChooserButtonClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceStyleSchemeChooserButtonClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceStyleSchemeChooserButtonClass class_struct = (GtkSourceStyleSchemeChooserButtonClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceStyleSchemeChooserButtonClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceStyleSchemeChooserButtonClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_chooser_button_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_style_scheme_chooser_button_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_chooser_get_style_scheme(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_style_scheme_chooser_set_style_scheme(IntPtr raw, IntPtr scheme);

		[GLib.Property ("style-scheme")]
		public Gtk.SourceStyleScheme StyleScheme {
			get  {
				IntPtr raw_ret = gtk_source_style_scheme_chooser_get_style_scheme(Handle);
				Gtk.SourceStyleScheme ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceStyleScheme;
				return ret;
			}
			set  {
				gtk_source_style_scheme_chooser_set_style_scheme(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

#endregion
	}
}
