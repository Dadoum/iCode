// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceStyle : GLib.Object {

		public SourceStyle (IntPtr raw) : base(raw) {}

		protected SourceStyle() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("line-background")]
		public string LineBackground {
			get {
				GLib.Value val = GetProperty ("line-background");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("background")]
		public string Background {
			get {
				GLib.Value val = GetProperty ("background");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("foreground")]
		public string Foreground {
			get {
				GLib.Value val = GetProperty ("foreground");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("bold")]
		public bool Bold {
			get {
				GLib.Value val = GetProperty ("bold");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("italic")]
		public bool Italic {
			get {
				GLib.Value val = GetProperty ("italic");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("strikethrough")]
		public bool Strikethrough {
			get {
				GLib.Value val = GetProperty ("strikethrough");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("scale")]
		public string Scale {
			get {
				GLib.Value val = GetProperty ("scale");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("underline-color")]
		public string UnderlineColor {
			get {
				GLib.Value val = GetProperty ("underline-color");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("line-background-set")]
		public bool LineBackgroundSet {
			get {
				GLib.Value val = GetProperty ("line-background-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("foreground-set")]
		public bool ForegroundSet {
			get {
				GLib.Value val = GetProperty ("foreground-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("background-set")]
		public bool BackgroundSet {
			get {
				GLib.Value val = GetProperty ("background-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("bold-set")]
		public bool BoldSet {
			get {
				GLib.Value val = GetProperty ("bold-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("italic-set")]
		public bool ItalicSet {
			get {
				GLib.Value val = GetProperty ("italic-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("underline-set")]
		public bool UnderlineSet {
			get {
				GLib.Value val = GetProperty ("underline-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("strikethrough-set")]
		public bool StrikethroughSet {
			get {
				GLib.Value val = GetProperty ("strikethrough-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("scale-set")]
		public bool ScaleSet {
			get {
				GLib.Value val = GetProperty ("scale-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("underline-color-set")]
		public bool UnderlineColorSet {
			get {
				GLib.Value val = GetProperty ("underline-color-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceStyleClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceStyleClass> class_structs;

		static GtkSourceStyleClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceStyleClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceStyleClass class_struct = (GtkSourceStyleClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceStyleClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceStyleClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_copy(IntPtr raw);

		public Gtk.SourceStyle Copy() {
			IntPtr raw_ret = gtk_source_style_copy(Handle);
			Gtk.SourceStyle ret = GLib.Object.GetObject(raw_ret, true) as Gtk.SourceStyle;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_style_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
