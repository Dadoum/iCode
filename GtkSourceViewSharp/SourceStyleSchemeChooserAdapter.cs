// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceStyleSchemeChooserAdapter : GLib.GInterfaceAdapter, Gtk.ISourceStyleSchemeChooser {

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceStyleSchemeChooserInterface {
			public GetStyleSchemeNativeDelegate GetStyleScheme;
			public SetStyleSchemeNativeDelegate SetStyleScheme;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=12)]
			private IntPtr[] Padding;
		}

		static GtkSourceStyleSchemeChooserInterface iface;

		static SourceStyleSchemeChooserAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (SourceStyleSchemeChooserAdapter));
			iface.GetStyleScheme = new GetStyleSchemeNativeDelegate (GetStyleScheme_cb);
			iface.SetStyleScheme = new SetStyleSchemeNativeDelegate (SetStyleScheme_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetStyleSchemeNativeDelegate (IntPtr inst);

		static IntPtr GetStyleScheme_cb (IntPtr inst)
		{
			try {
				ISourceStyleSchemeChooserImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceStyleSchemeChooserImplementor;
				Gtk.SourceStyleScheme __result;
				__result = __obj.StyleScheme;
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SetStyleSchemeNativeDelegate (IntPtr inst, IntPtr scheme);

		static void SetStyleScheme_cb (IntPtr inst, IntPtr scheme)
		{
			try {
				ISourceStyleSchemeChooserImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceStyleSchemeChooserImplementor;
				__obj.StyleScheme = GLib.Object.GetObject(scheme) as Gtk.SourceStyleScheme;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GtkSourceStyleSchemeChooserInterface native_iface = (GtkSourceStyleSchemeChooserInterface) Marshal.PtrToStructure (ifaceptr, typeof (GtkSourceStyleSchemeChooserInterface));
			native_iface.GetStyleScheme = iface.GetStyleScheme;
			native_iface.SetStyleScheme = iface.SetStyleScheme;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
		}

		GLib.Object implementor;

		public SourceStyleSchemeChooserAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public SourceStyleSchemeChooserAdapter (ISourceStyleSchemeChooserImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public SourceStyleSchemeChooserAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_chooser_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_style_scheme_chooser_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static ISourceStyleSchemeChooser GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static ISourceStyleSchemeChooser GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ISourceStyleSchemeChooserImplementor)
				return new SourceStyleSchemeChooserAdapter (obj as ISourceStyleSchemeChooserImplementor);
			else if (obj as ISourceStyleSchemeChooser == null)
				return new SourceStyleSchemeChooserAdapter (obj.Handle);
			else
				return obj as ISourceStyleSchemeChooser;
		}

		public ISourceStyleSchemeChooserImplementor Implementor {
			get {
				return implementor as ISourceStyleSchemeChooserImplementor;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_chooser_get_style_scheme(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_style_scheme_chooser_set_style_scheme(IntPtr raw, IntPtr scheme);

		[GLib.Property ("style-scheme")]
		public Gtk.SourceStyleScheme StyleScheme {
			get  {
				IntPtr raw_ret = gtk_source_style_scheme_chooser_get_style_scheme(Handle);
				Gtk.SourceStyleScheme ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceStyleScheme;
				return ret;
			}
			set  {
				gtk_source_style_scheme_chooser_set_style_scheme(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

#endregion
	}
}
