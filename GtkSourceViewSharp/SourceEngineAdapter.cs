// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceEngineAdapter : GLib.GInterfaceAdapter, Gtk.ISourceEngine {

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceEngineInterface {
			IntPtr AttachBuffer;
			IntPtr TextInserted;
			IntPtr TextDeleted;
			IntPtr UpdateHighlight;
			IntPtr SetStyleScheme;
		}

		static GtkSourceEngineInterface iface;

		static SourceEngineAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (SourceEngineAdapter));
		}

		static void Initialize (IntPtr ptr, IntPtr data)
		{
		}

		GLib.Object implementor;

		public SourceEngineAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public SourceEngineAdapter (ISourceEngineImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public SourceEngineAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_engine_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_engine_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static ISourceEngine GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static ISourceEngine GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ISourceEngineImplementor)
				return new SourceEngineAdapter (obj as ISourceEngineImplementor);
			else if (obj as ISourceEngine == null)
				return new SourceEngineAdapter (obj.Handle);
			else
				return obj as ISourceEngine;
		}

		public ISourceEngineImplementor Implementor {
			get {
				return implementor as ISourceEngineImplementor;
			}
		}

#endregion
	}
}
