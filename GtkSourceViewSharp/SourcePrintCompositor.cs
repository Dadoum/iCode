// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourcePrintCompositor : GLib.Object {

		public SourcePrintCompositor (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_compositor_new(IntPtr buffer);

		public SourcePrintCompositor (Gtk.SourceBuffer buffer) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourcePrintCompositor)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				if (buffer != null) {
					names.Add ("buffer");
					vals.Add (new GLib.Value (buffer));
				}
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			Raw = gtk_source_print_compositor_new(buffer == null ? IntPtr.Zero : buffer.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_compositor_new_from_view(IntPtr view);

		public SourcePrintCompositor (Gtk.SourceView view) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourcePrintCompositor)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = gtk_source_print_compositor_new_from_view(view == null ? IntPtr.Zero : view.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_compositor_get_buffer(IntPtr raw);

		[GLib.Property ("buffer")]
		public Gtk.SourceBuffer Buffer {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_buffer(Handle);
				Gtk.SourceBuffer ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceBuffer;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_print_compositor_get_tab_width(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_tab_width(IntPtr raw, uint width);

		[GLib.Property ("tab-width")]
		public uint TabWidth {
			get  {
				uint raw_ret = gtk_source_print_compositor_get_tab_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_tab_width(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_print_compositor_get_highlight_syntax(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_highlight_syntax(IntPtr raw, bool highlight);

		[GLib.Property ("highlight-syntax")]
		public bool HighlightSyntax {
			get  {
				bool raw_ret = gtk_source_print_compositor_get_highlight_syntax(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_highlight_syntax(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_print_compositor_get_print_line_numbers(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_print_line_numbers(IntPtr raw, uint interval);

		[GLib.Property ("print-line-numbers")]
		public uint PrintLineNumbers {
			get  {
				uint raw_ret = gtk_source_print_compositor_get_print_line_numbers(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_print_line_numbers(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_print_compositor_get_print_header(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_print_header(IntPtr raw, bool print);

		[GLib.Property ("print-header")]
		public bool PrintHeader {
			get  {
				bool raw_ret = gtk_source_print_compositor_get_print_header(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_print_header(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_print_compositor_get_print_footer(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_print_footer(IntPtr raw, bool print);

		[GLib.Property ("print-footer")]
		public bool PrintFooter {
			get  {
				bool raw_ret = gtk_source_print_compositor_get_print_footer(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_print_compositor_set_print_footer(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_compositor_get_body_font_name(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_body_font_name(IntPtr raw, IntPtr font_name);

		[GLib.Property ("body-font-name")]
		public string BodyFontName {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_body_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_compositor_set_body_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_compositor_get_line_numbers_font_name(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_line_numbers_font_name(IntPtr raw, IntPtr font_name);

		[GLib.Property ("line-numbers-font-name")]
		public string LineNumbersFontName {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_line_numbers_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_compositor_set_line_numbers_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_compositor_get_header_font_name(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_header_font_name(IntPtr raw, IntPtr font_name);

		[GLib.Property ("header-font-name")]
		public string HeaderFontName {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_header_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_compositor_set_header_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_compositor_get_footer_font_name(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_footer_font_name(IntPtr raw, IntPtr font_name);

		[GLib.Property ("footer-font-name")]
		public string FooterFontName {
			get  {
				IntPtr raw_ret = gtk_source_print_compositor_get_footer_font_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_print_compositor_set_footer_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_print_compositor_get_n_pages(IntPtr raw);

		[GLib.Property ("n-pages")]
		public int NPages {
			get  {
				int raw_ret = gtk_source_print_compositor_get_n_pages(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourcePrintCompositorClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourcePrintCompositorClass> class_structs;

		static GtkSourcePrintCompositorClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourcePrintCompositorClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourcePrintCompositorClass class_struct = (GtkSourcePrintCompositorClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourcePrintCompositorClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourcePrintCompositorClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern double gtk_source_print_compositor_get_pagination_progress(IntPtr raw);

		public double PaginationProgress { 
			get {
				double raw_ret = gtk_source_print_compositor_get_pagination_progress(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_print_compositor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_print_compositor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_footer_format(IntPtr raw, bool separator, IntPtr left, IntPtr center, IntPtr right);

		public void SetFooterFormat(bool separator, string left, string center, string right) {
			IntPtr native_left = GLib.Marshaller.StringToPtrGStrdup (left);
			IntPtr native_center = GLib.Marshaller.StringToPtrGStrdup (center);
			IntPtr native_right = GLib.Marshaller.StringToPtrGStrdup (right);
			gtk_source_print_compositor_set_footer_format(Handle, separator, native_left, native_center, native_right);
			GLib.Marshaller.Free (native_left);
			GLib.Marshaller.Free (native_center);
			GLib.Marshaller.Free (native_right);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_print_compositor_set_header_format(IntPtr raw, bool separator, IntPtr left, IntPtr center, IntPtr right);

		public void SetHeaderFormat(bool separator, string left, string center, string right) {
			IntPtr native_left = GLib.Marshaller.StringToPtrGStrdup (left);
			IntPtr native_center = GLib.Marshaller.StringToPtrGStrdup (center);
			IntPtr native_right = GLib.Marshaller.StringToPtrGStrdup (right);
			gtk_source_print_compositor_set_header_format(Handle, separator, native_left, native_center, native_right);
			GLib.Marshaller.Free (native_left);
			GLib.Marshaller.Free (native_center);
			GLib.Marshaller.Free (native_right);
		}

#endregion
	}
}
