// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceUndoManagerDefault : GLib.Object, Gtk.ISourceUndoManager {

		public SourceUndoManagerDefault (IntPtr raw) : base(raw) {}

		protected SourceUndoManagerDefault() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_default_set_max_undo_levels(IntPtr raw, int max_undo_levels);

		[GLib.Property ("max-undo-levels")]
		public int MaxUndoLevels {
			get {
				GLib.Value val = GetProperty ("max-undo-levels");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gtk_source_undo_manager_default_set_max_undo_levels(Handle, value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceUndoManagerDefaultClass {
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceUndoManagerDefaultClass> class_structs;

		static GtkSourceUndoManagerDefaultClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceUndoManagerDefaultClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceUndoManagerDefaultClass class_struct = (GtkSourceUndoManagerDefaultClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceUndoManagerDefaultClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceUndoManagerDefaultClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_undo_manager_default_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_undo_manager_default_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_begin_not_undoable_action(IntPtr raw);

		public void BeginNotUndoableAction() {
			gtk_source_undo_manager_begin_not_undoable_action(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_undo_manager_can_redo(IntPtr raw);

		public bool CanRedo() {
			bool raw_ret = gtk_source_undo_manager_can_redo(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_can_redo_changed(IntPtr raw);

		public void CanRedoChanged() {
			gtk_source_undo_manager_can_redo_changed(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_undo_manager_can_undo(IntPtr raw);

		public bool CanUndo() {
			bool raw_ret = gtk_source_undo_manager_can_undo(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_can_undo_changed(IntPtr raw);

		public void CanUndoChanged() {
			gtk_source_undo_manager_can_undo_changed(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_end_not_undoable_action(IntPtr raw);

		public void EndNotUndoableAction() {
			gtk_source_undo_manager_end_not_undoable_action(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_redo(IntPtr raw);

		public void Redo() {
			gtk_source_undo_manager_redo(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_undo_manager_undo(IntPtr raw);

		public void Undo() {
			gtk_source_undo_manager_undo(Handle);
		}

#endregion
	}
}
