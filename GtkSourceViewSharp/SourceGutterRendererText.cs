// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceGutterRendererText : Gtk.SourceGutterRenderer {

		public SourceGutterRendererText (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_gutter_renderer_text_new();

		public SourceGutterRendererText () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceGutterRendererText)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_gutter_renderer_text_new();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_text_set_markup(IntPtr raw, IntPtr markup, int length);

		[GLib.Property ("markup")]
		public string Markup {
			get {
				GLib.Value val = GetProperty ("markup");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_gutter_renderer_text_set_markup(Handle, native_value, System.Text.Encoding.UTF8.GetByteCount (value));
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_text_set_text(IntPtr raw, IntPtr text, int length);

		[GLib.Property ("text")]
		public string Text {
			get {
				GLib.Value val = GetProperty ("text");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gtk_source_gutter_renderer_text_set_text(Handle, native_value, System.Text.Encoding.UTF8.GetByteCount (value));
				GLib.Marshaller.Free (native_value);
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceGutterRendererTextClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (Gtk.SourceGutterRenderer)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceGutterRendererTextClass> class_structs;

		static GtkSourceGutterRendererTextClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceGutterRendererTextClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceGutterRendererTextClass class_struct = (GtkSourceGutterRendererTextClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceGutterRendererTextClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceGutterRendererTextClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_gutter_renderer_text_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_gutter_renderer_text_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_text_measure(IntPtr raw, IntPtr text, out int width, out int height);

		public void Measure(string text, out int width, out int height) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gtk_source_gutter_renderer_text_measure(Handle, native_text, out width, out height);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_text_measure_markup(IntPtr raw, IntPtr markup, out int width, out int height);

		public void MeasureMarkup(string markup, out int width, out int height) {
			IntPtr native_markup = GLib.Marshaller.StringToPtrGStrdup (markup);
			gtk_source_gutter_renderer_text_measure_markup(Handle, native_markup, out width, out height);
			GLib.Marshaller.Free (native_markup);
		}

#endregion
	}
}
