// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceGutterRenderer : GLib.InitiallyUnowned {

		public SourceGutterRenderer (IntPtr raw) : base(raw) {}

		protected SourceGutterRenderer() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_gutter_renderer_get_visible(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_set_visible(IntPtr raw, bool visible);

		[GLib.Property ("visible")]
		public bool Visible {
			get  {
				bool raw_ret = gtk_source_gutter_renderer_get_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_gutter_renderer_set_visible(Handle, value);
			}
		}

		[GLib.Property ("xpad")]
		public int Xpad {
			get {
				GLib.Value val = GetProperty ("xpad");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("xpad", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("ypad")]
		public int Ypad {
			get {
				GLib.Value val = GetProperty ("ypad");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("ypad", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("xalign")]
		public float Xalign {
			get {
				GLib.Value val = GetProperty ("xalign");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("xalign", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("yalign")]
		public float Yalign {
			get {
				GLib.Value val = GetProperty ("yalign");
				float ret = (float) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("yalign", val);
				val.Dispose ();
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_gutter_renderer_get_alignment_mode(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_set_alignment_mode(IntPtr raw, int mode);

		[GLib.Property ("alignment-mode")]
		public Gtk.SourceGutterRendererAlignmentMode AlignmentMode {
			get  {
				int raw_ret = gtk_source_gutter_renderer_get_alignment_mode(Handle);
				Gtk.SourceGutterRendererAlignmentMode ret = (Gtk.SourceGutterRendererAlignmentMode) raw_ret;
				return ret;
			}
			set  {
				gtk_source_gutter_renderer_set_alignment_mode(Handle, (int) value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_gutter_renderer_get_size(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_set_size(IntPtr raw, int size);

		[GLib.Property ("size")]
		public int Size {
			get  {
				int raw_ret = gtk_source_gutter_renderer_get_size(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				gtk_source_gutter_renderer_set_size(Handle, value);
			}
		}

		[GLib.Property ("background-set")]
		public bool BackgroundSet {
			get {
				GLib.Value val = GetProperty ("background-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("background-set", val);
				val.Dispose ();
			}
		}

		[GLib.Signal("queue-draw")]
		public event System.EventHandler QueueDraw {
			add {
				this.AddSignalHandler ("queue-draw", value);
			}
			remove {
				this.RemoveSignalHandler ("queue-draw", value);
			}
		}

		static EndNativeDelegate End_cb_delegate;
		static EndNativeDelegate EndVMCallback {
			get {
				if (End_cb_delegate == null)
					End_cb_delegate = new EndNativeDelegate (End_cb);
				return End_cb_delegate;
			}
		}

		static void OverrideEnd (GLib.GType gtype)
		{
			OverrideEnd (gtype, EndVMCallback);
		}

		static void OverrideEnd (GLib.GType gtype, EndNativeDelegate callback)
		{
			GtkSourceGutterRendererClass class_iface = GetClassStruct (gtype, false);
			class_iface.End = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EndNativeDelegate (IntPtr inst);

		static void End_cb (IntPtr inst)
		{
			try {
				SourceGutterRenderer __obj = GLib.Object.GetObject (inst, false) as SourceGutterRenderer;
				__obj.OnEnd ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SourceGutterRenderer), ConnectionMethod="OverrideEnd")]
		protected virtual void OnEnd ()
		{
			InternalEnd ();
		}

		private void InternalEnd ()
		{
			EndNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).End;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		static QueueDrawNativeDelegate QueueDraw_cb_delegate;
		static QueueDrawNativeDelegate QueueDrawVMCallback {
			get {
				if (QueueDraw_cb_delegate == null)
					QueueDraw_cb_delegate = new QueueDrawNativeDelegate (QueueDraw_cb);
				return QueueDraw_cb_delegate;
			}
		}

		static void OverrideQueueDraw (GLib.GType gtype)
		{
			OverrideQueueDraw (gtype, QueueDrawVMCallback);
		}

		static void OverrideQueueDraw (GLib.GType gtype, QueueDrawNativeDelegate callback)
		{
			GtkSourceGutterRendererClass class_iface = GetClassStruct (gtype, false);
			class_iface.QueueDraw = callback;
			OverrideClassStruct (gtype, class_iface);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void QueueDrawNativeDelegate (IntPtr inst);

		static void QueueDraw_cb (IntPtr inst)
		{
			try {
				SourceGutterRenderer __obj = GLib.Object.GetObject (inst, false) as SourceGutterRenderer;
				__obj.OnQueueDraw ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gtk.SourceGutterRenderer), ConnectionMethod="OverrideQueueDraw")]
		protected virtual void OnQueueDraw ()
		{
			InternalQueueDraw ();
		}

		private void InternalQueueDraw ()
		{
			QueueDrawNativeDelegate unmanaged = GetClassStruct (this.LookupGType ().GetThresholdType (), true).QueueDraw;
			if (unmanaged == null) return;

			unmanaged (this.Handle);
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceGutterRendererClass {
			IntPtr Begin;
			IntPtr Draw;
			public EndNativeDelegate End;
			IntPtr ChangeView;
			IntPtr ChangeBuffer;
			IntPtr QueryActivatable;
			IntPtr Activate;
			public QueueDrawNativeDelegate QueueDraw;
			IntPtr QueryTooltip;
			IntPtr QueryData;
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=20)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.InitiallyUnowned)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceGutterRendererClass> class_structs;

		static GtkSourceGutterRendererClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceGutterRendererClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceGutterRendererClass class_struct = (GtkSourceGutterRendererClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceGutterRendererClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceGutterRendererClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_end(IntPtr raw);

		public void End() {
			gtk_source_gutter_renderer_end(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_get_alignment(IntPtr raw, out float xalign, out float yalign);

		public void GetAlignment(out float xalign, out float yalign) {
			gtk_source_gutter_renderer_get_alignment(Handle, out xalign, out yalign);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_get_padding(IntPtr raw, out int xpad, out int ypad);

		public void GetPadding(out int xpad, out int ypad) {
			gtk_source_gutter_renderer_get_padding(Handle, out xpad, out ypad);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_gutter_renderer_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_gutter_renderer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_queue_draw(IntPtr raw);

		public void QueueDraw() {
			gtk_source_gutter_renderer_queue_draw(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_set_alignment(IntPtr raw, float xalign, float yalign);

		public void SetAlignment(float xalign, float yalign) {
			gtk_source_gutter_renderer_set_alignment(Handle, xalign, yalign);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_gutter_renderer_set_padding(IntPtr raw, int xpad, int ypad);

		public void SetPadding(int xpad, int ypad) {
			gtk_source_gutter_renderer_set_padding(Handle, xpad, ypad);
		}

#endregion
	}
}
