// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceCompletionProposalAdapter : GLib.GInterfaceAdapter, Gtk.ISourceCompletionProposal {

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceCompletionProposalIface {
			public GetLabelNativeDelegate GetLabel;
			public GetMarkupNativeDelegate GetMarkup;
			public GetTextNativeDelegate GetText;
			IntPtr GetIcon;
			public GetIconNameNativeDelegate GetIconName;
			IntPtr GetGicon;
			public GetInfoNativeDelegate GetInfo;
			public HashNativeDelegate Hash;
			public EqualNativeDelegate Equal;
			IntPtr Changed;
		}

		static GtkSourceCompletionProposalIface iface;

		static SourceCompletionProposalAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (SourceCompletionProposalAdapter));
			iface.GetLabel = new GetLabelNativeDelegate (GetLabel_cb);
			iface.GetMarkup = new GetMarkupNativeDelegate (GetMarkup_cb);
			iface.GetText = new GetTextNativeDelegate (GetText_cb);
			iface.GetIconName = new GetIconNameNativeDelegate (GetIconName_cb);
			iface.GetInfo = new GetInfoNativeDelegate (GetInfo_cb);
			iface.Hash = new HashNativeDelegate (Hash_cb);
			iface.Equal = new EqualNativeDelegate (Equal_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetLabelNativeDelegate (IntPtr inst);

		static IntPtr GetLabel_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProposalImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProposalImplementor;
				string __result;
				__result = __obj.Label;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetMarkupNativeDelegate (IntPtr inst);

		static IntPtr GetMarkup_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProposalImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProposalImplementor;
				string __result;
				__result = __obj.Markup;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetTextNativeDelegate (IntPtr inst);

		static IntPtr GetText_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProposalImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProposalImplementor;
				string __result;
				__result = __obj.Text;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetIconNameNativeDelegate (IntPtr inst);

		static IntPtr GetIconName_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProposalImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProposalImplementor;
				string __result;
				__result = __obj.IconName;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetInfoNativeDelegate (IntPtr inst);

		static IntPtr GetInfo_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProposalImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProposalImplementor;
				string __result;
				__result = __obj.Info;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint HashNativeDelegate (IntPtr inst);

		static uint Hash_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProposalImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProposalImplementor;
				uint __result;
				__result = __obj.Hash ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool EqualNativeDelegate (IntPtr inst, IntPtr other);

		static bool Equal_cb (IntPtr inst, IntPtr other)
		{
			try {
				ISourceCompletionProposalImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProposalImplementor;
				bool __result;
				__result = __obj.Equal (Gtk.SourceCompletionProposalAdapter.GetObject (other, false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GtkSourceCompletionProposalIface native_iface = (GtkSourceCompletionProposalIface) Marshal.PtrToStructure (ifaceptr, typeof (GtkSourceCompletionProposalIface));
			native_iface.GetLabel = iface.GetLabel;
			native_iface.GetMarkup = iface.GetMarkup;
			native_iface.GetText = iface.GetText;
			native_iface.GetIconName = iface.GetIconName;
			native_iface.GetInfo = iface.GetInfo;
			native_iface.Hash = iface.Hash;
			native_iface.Equal = iface.Equal;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
		}

		GLib.Object implementor;

		public SourceCompletionProposalAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public SourceCompletionProposalAdapter (ISourceCompletionProposalImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public SourceCompletionProposalAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_completion_proposal_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static ISourceCompletionProposal GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static ISourceCompletionProposal GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ISourceCompletionProposalImplementor)
				return new SourceCompletionProposalAdapter (obj as ISourceCompletionProposalImplementor);
			else if (obj as ISourceCompletionProposal == null)
				return new SourceCompletionProposalAdapter (obj.Handle);
			else
				return obj as ISourceCompletionProposal;
		}

		public ISourceCompletionProposalImplementor Implementor {
			get {
				return implementor as ISourceCompletionProposalImplementor;
			}
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Object.GetObject (Handle).AddSignalHandler ("changed", value);
			}
			remove {
				GLib.Object.GetObject (Handle).RemoveSignalHandler ("changed", value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_proposal_changed(IntPtr raw);

		public void Changed() {
			gtk_source_completion_proposal_changed(Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_completion_proposal_equal(IntPtr raw, IntPtr other);

		public bool Equal(Gtk.ISourceCompletionProposal other) {
			bool raw_ret = gtk_source_completion_proposal_equal(Handle, other == null ? IntPtr.Zero : ((other is GLib.Object) ? (other as GLib.Object).Handle : (other as Gtk.SourceCompletionProposalAdapter).Handle));
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_icon_name(IntPtr raw);

		public string IconName { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_info(IntPtr raw);

		public string Info { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_info(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_label(IntPtr raw);

		public string Label { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_label(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_markup(IntPtr raw);

		public string Markup { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_markup(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_proposal_get_text(IntPtr raw);

		public string Text { 
			get {
				IntPtr raw_ret = gtk_source_completion_proposal_get_text(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gtk_source_completion_proposal_hash(IntPtr raw);

		public uint Hash() {
			uint raw_ret = gtk_source_completion_proposal_hash(Handle);
			uint ret = raw_ret;
			return ret;
		}

#endregion
	}
}
