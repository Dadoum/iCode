// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceLanguageManager : GLib.Object {

		public SourceLanguageManager (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_new();

		public SourceLanguageManager () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceLanguageManager)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_language_manager_new();
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_search_path(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_language_manager_set_search_path(IntPtr raw, IntPtr dirs);

		[GLib.Property ("search-path")]
		public string SearchPath {
			get  {
				IntPtr raw_ret = gtk_source_language_manager_get_search_path(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				gtk_source_language_manager_set_search_path(Handle, GLib.Marshaller.StringToPtrGStrdup(value));
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_language_ids(IntPtr raw);

		[GLib.Property ("language-ids")]
		public string LanguageIds {
			get  {
				IntPtr raw_ret = gtk_source_language_manager_get_language_ids(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceLanguageManagerClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceLanguageManagerClass> class_structs;

		static GtkSourceLanguageManagerClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceLanguageManagerClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceLanguageManagerClass class_struct = (GtkSourceLanguageManagerClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceLanguageManagerClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceLanguageManagerClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_default();

		public static Gtk.SourceLanguageManager Default { 
			get {
				IntPtr raw_ret = gtk_source_language_manager_get_default();
				Gtk.SourceLanguageManager ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceLanguageManager;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_language(IntPtr raw, IntPtr id);

		public Gtk.SourceLanguage GetLanguage(string id) {
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			IntPtr raw_ret = gtk_source_language_manager_get_language(Handle, native_id);
			Gtk.SourceLanguage ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceLanguage;
			GLib.Marshaller.Free (native_id);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_language_manager_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_language_manager_guess_language(IntPtr raw, IntPtr filename, IntPtr content_type);

		public Gtk.SourceLanguage GuessLanguage(string filename, string content_type) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr native_content_type = GLib.Marshaller.StringToPtrGStrdup (content_type);
			IntPtr raw_ret = gtk_source_language_manager_guess_language(Handle, native_filename, native_content_type);
			Gtk.SourceLanguage ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceLanguage;
			GLib.Marshaller.Free (native_filename);
			GLib.Marshaller.Free (native_content_type);
			return ret;
		}

#endregion
	}
}
