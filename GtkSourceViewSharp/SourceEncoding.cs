// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceEncoding : GLib.Opaque {

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_copy(IntPtr raw);

		public Gtk.SourceEncoding Copy() {
			IntPtr raw_ret = gtk_source_encoding_copy(Handle);
			Gtk.SourceEncoding ret = raw_ret == IntPtr.Zero ? null : (Gtk.SourceEncoding) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.SourceEncoding), true);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_all();

		public static GLib.SList All { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_all();
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_charset(IntPtr raw);

		public string Charset { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_charset(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_current();

		public static Gtk.SourceEncoding Current { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_current();
				Gtk.SourceEncoding ret = raw_ret == IntPtr.Zero ? null : (Gtk.SourceEncoding) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.SourceEncoding), false);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_default_candidates();

		public static GLib.SList DefaultCandidates { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_default_candidates();
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_from_charset(IntPtr charset);

		public static Gtk.SourceEncoding GetFromCharset(string charset) {
			IntPtr native_charset = GLib.Marshaller.StringToPtrGStrdup (charset);
			IntPtr raw_ret = gtk_source_encoding_get_from_charset(native_charset);
			Gtk.SourceEncoding ret = raw_ret == IntPtr.Zero ? null : (Gtk.SourceEncoding) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.SourceEncoding), false);
			GLib.Marshaller.Free (native_charset);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_get_utf8();

		public static Gtk.SourceEncoding Utf8 { 
			get {
				IntPtr raw_ret = gtk_source_encoding_get_utf8();
				Gtk.SourceEncoding ret = raw_ret == IntPtr.Zero ? null : (Gtk.SourceEncoding) GLib.Opaque.GetOpaque (raw_ret, typeof (Gtk.SourceEncoding), false);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_encoding_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = gtk_source_encoding_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		public SourceEncoding(IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_encoding_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gtk_source_encoding_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gtk_source_encoding_free (handle);
				return false;
			}
		}

		~SourceEncoding ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
