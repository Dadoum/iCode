// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceSpaceDrawer : GLib.Object {

		public SourceSpaceDrawer (IntPtr raw) : base(raw) {}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_space_drawer_new();

		public SourceSpaceDrawer () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (SourceSpaceDrawer)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_source_space_drawer_new();
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceSpaceDrawerClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=20)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceSpaceDrawerClass> class_structs;

		static GtkSourceSpaceDrawerClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceSpaceDrawerClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceSpaceDrawerClass class_struct = (GtkSourceSpaceDrawerClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceSpaceDrawerClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceSpaceDrawerClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_space_drawer_get_enable_matrix(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_space_drawer_set_enable_matrix(IntPtr raw, bool enable_matrix);

		public bool EnableMatrix { 
			get {
				bool raw_ret = gtk_source_space_drawer_get_enable_matrix(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_source_space_drawer_set_enable_matrix(Handle, value);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_space_drawer_get_matrix(IntPtr raw);

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_space_drawer_set_matrix(IntPtr raw, IntPtr matrix);

		public GLib.Variant Matrix { 
			get {
				IntPtr raw_ret = gtk_source_space_drawer_get_matrix(Handle);
				GLib.Variant ret = new GLib.Variant(raw_ret);
				return ret;
			}
			set {
				gtk_source_space_drawer_set_matrix(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_space_drawer_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_space_drawer_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_space_drawer_get_types_for_locations(IntPtr raw, int locations);

		public Gtk.SourceSpaceTypeFlags GetTypesForLocations(Gtk.SourceSpaceLocationFlags locations) {
			int raw_ret = gtk_source_space_drawer_get_types_for_locations(Handle, (int) locations);
			Gtk.SourceSpaceTypeFlags ret = (Gtk.SourceSpaceTypeFlags) raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_space_drawer_set_types_for_locations(IntPtr raw, int locations, int types);

		public void SetTypesForLocations(Gtk.SourceSpaceLocationFlags locations, Gtk.SourceSpaceTypeFlags types) {
			gtk_source_space_drawer_set_types_for_locations(Handle, (int) locations, (int) types);
		}

#endregion
	}
}
