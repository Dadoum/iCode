// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceCompletionProviderAdapter : GLib.GInterfaceAdapter, Gtk.ISourceCompletionProvider {

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceCompletionProviderIface {
			public GetNameNativeDelegate GetName;
			IntPtr GetIcon;
			public GetIconNameNativeDelegate GetIconName;
			IntPtr GetGicon;
			public PopulateNativeDelegate Populate;
			public MatchNativeDelegate Match;
			public GetActivationNativeDelegate GetActivation;
			IntPtr GetInfoWidget;
			public UpdateInfoNativeDelegate UpdateInfo;
			IntPtr GetStartIter;
			IntPtr ActivateProposal;
			public GetInteractiveDelayNativeDelegate GetInteractiveDelay;
			public GetPriorityNativeDelegate GetPriority;
		}

		static GtkSourceCompletionProviderIface iface;

		static SourceCompletionProviderAdapter ()
		{
			GLib.GType.Register (_gtype, typeof (SourceCompletionProviderAdapter));
			iface.GetName = new GetNameNativeDelegate (GetName_cb);
			iface.GetIconName = new GetIconNameNativeDelegate (GetIconName_cb);
			iface.Populate = new PopulateNativeDelegate (Populate_cb);
			iface.Match = new MatchNativeDelegate (Match_cb);
			iface.GetActivation = new GetActivationNativeDelegate (GetActivation_cb);
			iface.UpdateInfo = new UpdateInfoNativeDelegate (UpdateInfo_cb);
			iface.GetInteractiveDelay = new GetInteractiveDelayNativeDelegate (GetInteractiveDelay_cb);
			iface.GetPriority = new GetPriorityNativeDelegate (GetPriority_cb);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetNameNativeDelegate (IntPtr inst);

		static IntPtr GetName_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProviderImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProviderImplementor;
				string __result;
				__result = __obj.Name;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetIconNameNativeDelegate (IntPtr inst);

		static IntPtr GetIconName_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProviderImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProviderImplementor;
				string __result;
				__result = __obj.IconName;
				return GLib.Marshaller.StringToPtrGStrdup(__result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PopulateNativeDelegate (IntPtr inst, IntPtr context);

		static void Populate_cb (IntPtr inst, IntPtr context)
		{
			try {
				ISourceCompletionProviderImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProviderImplementor;
				__obj.Populate (GLib.Object.GetObject(context) as Gtk.SourceCompletionContext);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool MatchNativeDelegate (IntPtr inst, IntPtr context);

		static bool Match_cb (IntPtr inst, IntPtr context)
		{
			try {
				ISourceCompletionProviderImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProviderImplementor;
				bool __result;
				__result = __obj.Match (GLib.Object.GetObject(context) as Gtk.SourceCompletionContext);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetActivationNativeDelegate (IntPtr inst);

		static int GetActivation_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProviderImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProviderImplementor;
				Gtk.SourceCompletionActivation __result;
				__result = __obj.Activation;
				return (int) __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void UpdateInfoNativeDelegate (IntPtr inst, IntPtr proposal, IntPtr info);

		static void UpdateInfo_cb (IntPtr inst, IntPtr proposal, IntPtr info)
		{
			try {
				ISourceCompletionProviderImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProviderImplementor;
				__obj.UpdateInfo (Gtk.SourceCompletionProposalAdapter.GetObject (proposal, false), GLib.Object.GetObject(info) as Gtk.SourceCompletionInfo);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetInteractiveDelayNativeDelegate (IntPtr inst);

		static int GetInteractiveDelay_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProviderImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProviderImplementor;
				int __result;
				__result = __obj.InteractiveDelay;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate int GetPriorityNativeDelegate (IntPtr inst);

		static int GetPriority_cb (IntPtr inst)
		{
			try {
				ISourceCompletionProviderImplementor __obj = GLib.Object.GetObject (inst, false) as ISourceCompletionProviderImplementor;
				int __result;
				__result = __obj.Priority;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		static int class_offset = 2 * IntPtr.Size;

		static void Initialize (IntPtr ptr, IntPtr data)
		{
			IntPtr ifaceptr = new IntPtr (ptr.ToInt64 () + class_offset);
			GtkSourceCompletionProviderIface native_iface = (GtkSourceCompletionProviderIface) Marshal.PtrToStructure (ifaceptr, typeof (GtkSourceCompletionProviderIface));
			native_iface.GetName = iface.GetName;
			native_iface.GetIconName = iface.GetIconName;
			native_iface.Populate = iface.Populate;
			native_iface.Match = iface.Match;
			native_iface.GetActivation = iface.GetActivation;
			native_iface.UpdateInfo = iface.UpdateInfo;
			native_iface.GetInteractiveDelay = iface.GetInteractiveDelay;
			native_iface.GetPriority = iface.GetPriority;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
		}

		GLib.Object implementor;

		public SourceCompletionProviderAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public SourceCompletionProviderAdapter (ISourceCompletionProviderImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			else if (!(implementor is GLib.Object))
				throw new ArgumentException ("implementor must be a subclass of GLib.Object");
			this.implementor = implementor as GLib.Object;
		}

		public SourceCompletionProviderAdapter (IntPtr handle)
		{
			if (!_gtype.IsInstance (handle))
				throw new ArgumentException ("The gobject doesn't implement the GInterface of this adapter", "handle");
			implementor = GLib.Object.GetObject (handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_provider_get_type();

		private static GLib.GType _gtype = new GLib.GType (gtk_source_completion_provider_get_type ());

		public static GLib.GType GType {
			get {
				return _gtype;
			}
		}

		public override GLib.GType GInterfaceGType {
			get {
				return _gtype;
			}
		}

		public override IntPtr Handle {
			get {
				return implementor.Handle;
			}
		}

		public IntPtr OwnedHandle {
			get {
				return implementor.OwnedHandle;
			}
		}

		public static ISourceCompletionProvider GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static ISourceCompletionProvider GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is ISourceCompletionProviderImplementor)
				return new SourceCompletionProviderAdapter (obj as ISourceCompletionProviderImplementor);
			else if (obj as ISourceCompletionProvider == null)
				return new SourceCompletionProviderAdapter (obj.Handle);
			else
				return obj as ISourceCompletionProvider;
		}

		public ISourceCompletionProviderImplementor Implementor {
			get {
				return implementor as ISourceCompletionProviderImplementor;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_completion_provider_get_activation(IntPtr raw);

		public Gtk.SourceCompletionActivation Activation { 
			get {
				int raw_ret = gtk_source_completion_provider_get_activation(Handle);
				Gtk.SourceCompletionActivation ret = (Gtk.SourceCompletionActivation) raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_provider_get_icon_name(IntPtr raw);

		public string IconName { 
			get {
				IntPtr raw_ret = gtk_source_completion_provider_get_icon_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_completion_provider_get_interactive_delay(IntPtr raw);

		public int InteractiveDelay { 
			get {
				int raw_ret = gtk_source_completion_provider_get_interactive_delay(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_completion_provider_get_name(IntPtr raw);

		public string Name { 
			get {
				IntPtr raw_ret = gtk_source_completion_provider_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_source_completion_provider_get_priority(IntPtr raw);

		public int Priority { 
			get {
				int raw_ret = gtk_source_completion_provider_get_priority(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_completion_provider_match(IntPtr raw, IntPtr context);

		public bool Match(Gtk.SourceCompletionContext context) {
			bool raw_ret = gtk_source_completion_provider_match(Handle, context == null ? IntPtr.Zero : context.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_provider_populate(IntPtr raw, IntPtr context);

		public void Populate(Gtk.SourceCompletionContext context) {
			gtk_source_completion_provider_populate(Handle, context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_source_completion_provider_update_info(IntPtr raw, IntPtr proposal, IntPtr info);

		public void UpdateInfo(Gtk.ISourceCompletionProposal proposal, Gtk.SourceCompletionInfo info) {
			gtk_source_completion_provider_update_info(Handle, proposal == null ? IntPtr.Zero : ((proposal is GLib.Object) ? (proposal as GLib.Object).Handle : (proposal as Gtk.SourceCompletionProposalAdapter).Handle), info == null ? IntPtr.Zero : info.Handle);
		}

#endregion
	}
}
