// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct SourceRegionIter : IEquatable<SourceRegionIter> {

		private IntPtr _dummy1;
		private uint dummy2;
		private IntPtr _dummy3;

		public static Gtk.SourceRegionIter Zero = new Gtk.SourceRegionIter ();

		public static Gtk.SourceRegionIter New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gtk.SourceRegionIter.Zero;
			return (Gtk.SourceRegionIter) Marshal.PtrToStructure (raw, typeof (Gtk.SourceRegionIter));
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_region_iter_is_end(IntPtr raw);

		public bool IsEnd { 
			get {
				IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
				System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
				bool raw_ret = gtk_source_region_iter_is_end(this_as_native);
				bool ret = raw_ret;
				ReadNative (this_as_native, ref this);
				System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_source_region_iter_next(IntPtr raw);

		public bool Next() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			bool raw_ret = gtk_source_region_iter_next(this_as_native);
			bool ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		static void ReadNative (IntPtr native, ref Gtk.SourceRegionIter target)
		{
			target = New (native);
		}

		public bool Equals (SourceRegionIter other)
		{
			return true;
		}

		public override bool Equals (object other)
		{
			return other is SourceRegionIter && Equals ((SourceRegionIter) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
