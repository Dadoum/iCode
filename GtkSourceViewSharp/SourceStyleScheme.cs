// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class SourceStyleScheme : GLib.Object {

		public SourceStyleScheme (IntPtr raw) : base(raw) {}

		protected SourceStyleScheme() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_id(IntPtr raw);

		[GLib.Property ("id")]
		public string Id {
			get  {
				IntPtr raw_ret = gtk_source_style_scheme_get_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_name(IntPtr raw);

		[GLib.Property ("name")]
		public string Name {
			get  {
				IntPtr raw_ret = gtk_source_style_scheme_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_description(IntPtr raw);

		[GLib.Property ("description")]
		public string Description {
			get  {
				IntPtr raw_ret = gtk_source_style_scheme_get_description(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_filename(IntPtr raw);

		[GLib.Property ("filename")]
		public string Filename {
			get  {
				IntPtr raw_ret = gtk_source_style_scheme_get_filename(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[StructLayout (LayoutKind.Sequential)]
		struct GtkSourceStyleSchemeClass {
			[MarshalAs (UnmanagedType.ByValArray, SizeConst=10)]
			private IntPtr[] Padding;
		}

		static uint class_offset = ((GLib.GType) typeof (GLib.Object)).GetClassSize ();
		static Dictionary<GLib.GType, GtkSourceStyleSchemeClass> class_structs;

		static GtkSourceStyleSchemeClass GetClassStruct (GLib.GType gtype, bool use_cache)
		{
			if (class_structs == null)
				class_structs = new Dictionary<GLib.GType, GtkSourceStyleSchemeClass> ();

			if (use_cache && class_structs.ContainsKey (gtype))
				return class_structs [gtype];
			else {
				IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
				GtkSourceStyleSchemeClass class_struct = (GtkSourceStyleSchemeClass) Marshal.PtrToStructure (class_ptr, typeof (GtkSourceStyleSchemeClass));
				if (use_cache)
					class_structs.Add (gtype, class_struct);
				return class_struct;
			}
		}

		static void OverrideClassStruct (GLib.GType gtype, GtkSourceStyleSchemeClass class_struct)
		{
			IntPtr class_ptr = new IntPtr (gtype.GetClassPtr ().ToInt64 () + class_offset);
			Marshal.StructureToPtr (class_struct, class_ptr, false);
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_authors(IntPtr raw);

		public string Authors { 
			get {
				IntPtr raw_ret = gtk_source_style_scheme_get_authors(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_style(IntPtr raw, IntPtr style_id);

		public Gtk.SourceStyle GetStyle(string style_id) {
			IntPtr native_style_id = GLib.Marshaller.StringToPtrGStrdup (style_id);
			IntPtr raw_ret = gtk_source_style_scheme_get_style(Handle, native_style_id);
			Gtk.SourceStyle ret = GLib.Object.GetObject(raw_ret) as Gtk.SourceStyle;
			GLib.Marshaller.Free (native_style_id);
			return ret;
		}

		[DllImport("gtksourceview-4", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_source_style_scheme_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_source_style_scheme_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
